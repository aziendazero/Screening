package model.impexp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Oct 05 13:07:53 CEST 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class Impexp_SoCnfImpExpLogImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id {
            public Object get(Impexp_SoCnfImpExpLogImpl obj) {
                return obj.getId();
            }

            public void put(Impexp_SoCnfImpExpLogImpl obj, Object value) {
                obj.setId((Number) value);
            }
        }
        ,
        Progrulss {
            public Object get(Impexp_SoCnfImpExpLogImpl obj) {
                return obj.getProgrulss();
            }

            public void put(Impexp_SoCnfImpExpLogImpl obj, Object value) {
                obj.setProgrulss((Number) value);
            }
        }
        ,
        Impexp {
            public Object get(Impexp_SoCnfImpExpLogImpl obj) {
                return obj.getImpexp();
            }

            public void put(Impexp_SoCnfImpExpLogImpl obj, Object value) {
                obj.setImpexp((String) value);
            }
        }
        ,
        Tpdip {
            public Object get(Impexp_SoCnfImpExpLogImpl obj) {
                return obj.getTpdip();
            }

            public void put(Impexp_SoCnfImpExpLogImpl obj, Object value) {
                obj.setTpdip((String) value);
            }
        }
        ,
        Ulss {
            public Object get(Impexp_SoCnfImpExpLogImpl obj) {
                return obj.getUlss();
            }

            public void put(Impexp_SoCnfImpExpLogImpl obj, Object value) {
                obj.setUlss((String) value);
            }
        }
        ,
        Tpscr {
            public Object get(Impexp_SoCnfImpExpLogImpl obj) {
                return obj.getTpscr();
            }

            public void put(Impexp_SoCnfImpExpLogImpl obj, Object value) {
                obj.setTpscr((String) value);
            }
        }
        ,
        Nomefileimport {
            public Object get(Impexp_SoCnfImpExpLogImpl obj) {
                return obj.getNomefileimport();
            }

            public void put(Impexp_SoCnfImpExpLogImpl obj, Object value) {
                obj.setNomefileimport((String) value);
            }
        }
        ,
        Dtinizioelab {
            public Object get(Impexp_SoCnfImpExpLogImpl obj) {
                return obj.getDtinizioelab();
            }

            public void put(Impexp_SoCnfImpExpLogImpl obj, Object value) {
                obj.setDtinizioelab((Date) value);
            }
        }
        ,
        Op {
            public Object get(Impexp_SoCnfImpExpLogImpl obj) {
                return obj.getOp();
            }

            public void put(Impexp_SoCnfImpExpLogImpl obj, Object value) {
                obj.setOp((String) value);
            }
        }
        ,
        Nomefilelog {
            public Object get(Impexp_SoCnfImpExpLogImpl obj) {
                return obj.getNomefilelog();
            }

            public void put(Impexp_SoCnfImpExpLogImpl obj, Object value) {
                obj.setNomefilelog((String) value);
            }
        }
        ,
        Dtfineelab {
            public Object get(Impexp_SoCnfImpExpLogImpl obj) {
                return obj.getDtfineelab();
            }

            public void put(Impexp_SoCnfImpExpLogImpl obj, Object value) {
                obj.setDtfineelab((Date) value);
            }
        }
        ,
        LogFile {
            public Object get(Impexp_SoCnfImpExpLogImpl obj) {
                return obj.getLogFile();
            }

            public void put(Impexp_SoCnfImpExpLogImpl obj, Object value) {
                obj.setLogFile((BlobDomain) value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(Impexp_SoCnfImpExpLogImpl object);

        public abstract void put(Impexp_SoCnfImpExpLogImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int ID = AttributesEnum.Id.index();
    public static final int PROGRULSS = AttributesEnum.Progrulss.index();
    public static final int IMPEXP = AttributesEnum.Impexp.index();
    public static final int TPDIP = AttributesEnum.Tpdip.index();
    public static final int ULSS = AttributesEnum.Ulss.index();
    public static final int TPSCR = AttributesEnum.Tpscr.index();
    public static final int NOMEFILEIMPORT = AttributesEnum.Nomefileimport.index();
    public static final int DTINIZIOELAB = AttributesEnum.Dtinizioelab.index();
    public static final int OP = AttributesEnum.Op.index();
    public static final int NOMEFILELOG = AttributesEnum.Nomefilelog.index();
    public static final int DTFINEELAB = AttributesEnum.Dtfineelab.index();
    public static final int LOGFILE = AttributesEnum.LogFile.index();

    /**
     * This is the default constructor (do not remove).
     */
    public Impexp_SoCnfImpExpLogImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.impexp.Impexp_SoCnfImpExpLog");
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public Number getId() {
        return (Number) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for Progrulss, using the alias name Progrulss.
     * @return the value of Progrulss
     */
    public Number getProgrulss() {
        return (Number) getAttributeInternal(PROGRULSS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Progrulss.
     * @param value value to set the Progrulss
     */
    public void setProgrulss(Number value) {
        setAttributeInternal(PROGRULSS, value);
    }

    /**
     * Gets the attribute value for Impexp, using the alias name Impexp.
     * @return the value of Impexp
     */
    public String getImpexp() {
        return (String) getAttributeInternal(IMPEXP);
    }

    /**
     * Sets <code>value</code> as the attribute value for Impexp.
     * @param value value to set the Impexp
     */
    public void setImpexp(String value) {
        setAttributeInternal(IMPEXP, value);
    }

    /**
     * Gets the attribute value for Tpdip, using the alias name Tpdip.
     * @return the value of Tpdip
     */
    public String getTpdip() {
        return (String) getAttributeInternal(TPDIP);
    }

    /**
     * Sets <code>value</code> as the attribute value for Tpdip.
     * @param value value to set the Tpdip
     */
    public void setTpdip(String value) {
        setAttributeInternal(TPDIP, value);
    }

    /**
     * Gets the attribute value for Ulss, using the alias name Ulss.
     * @return the value of Ulss
     */
    public String getUlss() {
        return (String) getAttributeInternal(ULSS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Ulss.
     * @param value value to set the Ulss
     */
    public void setUlss(String value) {
        setAttributeInternal(ULSS, value);
    }

    /**
     * Gets the attribute value for Tpscr, using the alias name Tpscr.
     * @return the value of Tpscr
     */
    public String getTpscr() {
        return (String) getAttributeInternal(TPSCR);
    }

    /**
     * Sets <code>value</code> as the attribute value for Tpscr.
     * @param value value to set the Tpscr
     */
    public void setTpscr(String value) {
        setAttributeInternal(TPSCR, value);
    }

    /**
     * Gets the attribute value for Nomefileimport, using the alias name Nomefileimport.
     * @return the value of Nomefileimport
     */
    public String getNomefileimport() {
        return (String) getAttributeInternal(NOMEFILEIMPORT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Nomefileimport.
     * @param value value to set the Nomefileimport
     */
    public void setNomefileimport(String value) {
        setAttributeInternal(NOMEFILEIMPORT, value);
    }

    /**
     * Gets the attribute value for Dtinizioelab, using the alias name Dtinizioelab.
     * @return the value of Dtinizioelab
     */
    public Date getDtinizioelab() {
        return (Date) getAttributeInternal(DTINIZIOELAB);
    }

    /**
     * Sets <code>value</code> as the attribute value for Dtinizioelab.
     * @param value value to set the Dtinizioelab
     */
    public void setDtinizioelab(Date value) {
        setAttributeInternal(DTINIZIOELAB, value);
    }

    /**
     * Gets the attribute value for Op, using the alias name Op.
     * @return the value of Op
     */
    public String getOp() {
        return (String) getAttributeInternal(OP);
    }

    /**
     * Sets <code>value</code> as the attribute value for Op.
     * @param value value to set the Op
     */
    public void setOp(String value) {
        setAttributeInternal(OP, value);
    }

    /**
     * Gets the attribute value for Nomefilelog, using the alias name Nomefilelog.
     * @return the value of Nomefilelog
     */
    public String getNomefilelog() {
        return (String) getAttributeInternal(NOMEFILELOG);
    }

    /**
     * Sets <code>value</code> as the attribute value for Nomefilelog.
     * @param value value to set the Nomefilelog
     */
    public void setNomefilelog(String value) {
        setAttributeInternal(NOMEFILELOG, value);
    }

    /**
     * Gets the attribute value for Dtfineelab, using the alias name Dtfineelab.
     * @return the value of Dtfineelab
     */
    public Date getDtfineelab() {
        return (Date) getAttributeInternal(DTFINEELAB);
    }

    /**
     * Sets <code>value</code> as the attribute value for Dtfineelab.
     * @param value value to set the Dtfineelab
     */
    public void setDtfineelab(Date value) {
        setAttributeInternal(DTFINEELAB, value);
    }

    /**
     * Gets the attribute value for LogFile, using the alias name LogFile.
     * @return the value of LogFile
     */
    public BlobDomain getLogFile() {
        return (BlobDomain) getAttributeInternal(LOGFILE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LogFile.
     * @param value value to set the LogFile
     */
    public void setLogFile(BlobDomain value) {
        setAttributeInternal(LOGFILE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[] { id });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

