package model.round;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.domain.Date;
import oracle.jbo.Key;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---    Warning: Do not modify method signatures of generated methods.
//  ---------------------------------------------------------------------

public class Round_SoCnfComuneImpl extends EntityImpl {


    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Idcnf {
            public Object get(Round_SoCnfComuneImpl obj) {
                return obj.getIdcnf();
            }

            public void put(Round_SoCnfComuneImpl obj, Object value) {
                obj.setIdcnf((Integer)value);
            }
        }
        ,
        Codcom {
            public Object get(Round_SoCnfComuneImpl obj) {
                return obj.getCodcom();
            }

            public void put(Round_SoCnfComuneImpl obj, Object value) {
                obj.setCodcom((String)value);
            }
        }
        ,
        Idcentro1liv {
            public Object get(Round_SoCnfComuneImpl obj) {
                return obj.getIdcentro1liv();
            }

            public void put(Round_SoCnfComuneImpl obj, Object value) {
                obj.setIdcentro1liv((Integer)value);
            }
        }
        ,
        Idcentro2liv {
            public Object get(Round_SoCnfComuneImpl obj) {
                return obj.getIdcentro2liv();
            }

            public void put(Round_SoCnfComuneImpl obj, Object value) {
                obj.setIdcentro2liv((Integer)value);
            }
        }
        ,
        Tpscr {
            public Object get(Round_SoCnfComuneImpl obj) {
                return obj.getTpscr();
            }

            public void put(Round_SoCnfComuneImpl obj, Object value) {
                obj.setTpscr((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(Round_SoCnfComuneImpl object);

        public abstract void put(Round_SoCnfComuneImpl object, Object value);

        public int index() {
            return Round_SoCnfComuneImpl.AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return Round_SoCnfComuneImpl.AttributesEnum.firstIndex() + Round_SoCnfComuneImpl.AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = Round_SoCnfComuneImpl.AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int IDCNF = AttributesEnum.Idcnf.index();
    public static final int CODCOM = AttributesEnum.Codcom.index();
    public static final int IDCENTRO1LIV = AttributesEnum.Idcentro1liv.index();
    public static final int IDCENTRO2LIV = AttributesEnum.Idcentro2liv.index();
    public static final int TPSCR = AttributesEnum.Tpscr.index();

    /**
     *
     *  This is the default constructor (do not remove)
     */
  public Round_SoCnfComuneImpl()
  {
  }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.round.Round_SoCnfComune");
    }

    /**
     *
     *  Gets the attribute value for Idcnf, using the alias name Idcnf
     */
    public Integer getIdcnf()
  {
    return (Integer)getAttributeInternal(IDCNF);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Idcnf
   */
  public void setIdcnf(Integer value)
  {
    setAttributeInternal(IDCNF, value);
  }

  /**
   * 
   *  Gets the attribute value for Codcom, using the alias name Codcom
   */
  public String getCodcom()
  {
    return (String)getAttributeInternal(CODCOM);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Codcom
   */
  public void setCodcom(String value)
  {
    setAttributeInternal(CODCOM, value);
  }

  /**
   * 
   *  Gets the attribute value for Idcentro1liv, using the alias name Idcentro1liv
   */
  public Integer getIdcentro1liv()
  {
    return (Integer)getAttributeInternal(IDCENTRO1LIV);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Idcentro1liv
   */
  public void setIdcentro1liv(Integer value)
  {
    setAttributeInternal(IDCENTRO1LIV, value);
  }

  /**
   * 
   *  Gets the attribute value for Idcentro2liv, using the alias name Idcentro2liv
   */
  public Integer getIdcentro2liv()
  {
    return (Integer)getAttributeInternal(IDCENTRO2LIV);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Idcentro2liv
   */
  public void setIdcentro2liv(Integer value)
  {
    setAttributeInternal(IDCENTRO2LIV, value);
  }







  /**
   * 
   *  Gets the attribute value for Tpscr, using the alias name Tpscr
   */
  public String getTpscr()
  {
    return (String)getAttributeInternal(TPSCR);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Tpscr
   */
  public void setTpscr(String value)
  {
    setAttributeInternal(TPSCR, value);
  }

  /**
   * 
   *  getAttrInvokeAccessor: generated method. Do not modify.
   */
  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception
  {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

  /**
   * 
   *  setAttrInvokeAccessor: generated method. Do not modify.
   */
  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception
  {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param idcnf key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer idcnf) {
        return new Key(new Object[]{idcnf});
    }


}
