package model.round;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.Key;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---    Warning: Do not modify method signatures of generated methods.
//  ---------------------------------------------------------------------

public class Round_SoCnfAnagScrImpl extends EntityImpl {

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Codanagreg {
            public Object get(Round_SoCnfAnagScrImpl obj) {
                return obj.getCodanagreg();
            }

            public void put(Round_SoCnfAnagScrImpl obj, Object value) {
                obj.setCodanagreg((Integer)value);
            }
        }
        ,
        Ulss {
            public Object get(Round_SoCnfAnagScrImpl obj) {
                return obj.getUlss();
            }

            public void put(Round_SoCnfAnagScrImpl obj, Object value) {
                obj.setUlss((String)value);
            }
        }
        ,
        Tpscr {
            public Object get(Round_SoCnfAnagScrImpl obj) {
                return obj.getTpscr();
            }

            public void put(Round_SoCnfAnagScrImpl obj, Object value) {
                obj.setTpscr((String)value);
            }
        }
        ,
        Incluso {
            public Object get(Round_SoCnfAnagScrImpl obj) {
                return obj.getIncluso();
            }

            public void put(Round_SoCnfAnagScrImpl obj, Object value) {
                obj.setIncluso((Integer)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(Round_SoCnfAnagScrImpl object);

        public abstract void put(Round_SoCnfAnagScrImpl object, Object value);

        public int index() {
            return Round_SoCnfAnagScrImpl.AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return Round_SoCnfAnagScrImpl.AttributesEnum.firstIndex() + Round_SoCnfAnagScrImpl.AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = Round_SoCnfAnagScrImpl.AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CODANAGREG = AttributesEnum.Codanagreg.index();
    public static final int ULSS = AttributesEnum.Ulss.index();
    public static final int TPSCR = AttributesEnum.Tpscr.index();
    public static final int INCLUSO = AttributesEnum.Incluso.index();

    /**
     *
     *  This is the default constructor (do not remove)
     */
  public Round_SoCnfAnagScrImpl()
  {
  }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.round.Round_SoCnfAnagScr");
    }

    /**
     *
     *  Gets the attribute value for Codanagreg, using the alias name Codanagreg
     */
    public Integer getCodanagreg()
  {
    return (Integer)getAttributeInternal(CODANAGREG);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Codanagreg
   */
  public void setCodanagreg(Integer value)
  {
    setAttributeInternal(CODANAGREG, value);
  }

  /**
   * 
   *  Gets the attribute value for Ulss, using the alias name Ulss
   */
  public String getUlss()
  {
    return (String)getAttributeInternal(ULSS);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Ulss
   */
  public void setUlss(String value)
  {
    setAttributeInternal(ULSS, value);
  }

  /**
   * 
   *  Gets the attribute value for Tpscr, using the alias name Tpscr
   */
  public String getTpscr()
  {
    return (String)getAttributeInternal(TPSCR);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Tpscr
   */
  public void setTpscr(String value)
  {
    setAttributeInternal(TPSCR, value);
  }

  /**
   * 
   *  Gets the attribute value for Incluso, using the alias name Incluso
   */
  public Integer getIncluso()
  {
    return (Integer)getAttributeInternal(INCLUSO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Incluso
   */
  public void setIncluso(Integer value)
  {
    setAttributeInternal(INCLUSO, value);
  }

  /**
   * 
   *  getAttrInvokeAccessor: generated method. Do not modify.
   */
  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception
  {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

  /**
   * 
   *  setAttrInvokeAccessor: generated method. Do not modify.
   */
  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception
  {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param codanagreg key constituent
     * @param ulss key constituent
     * @param tpscr key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer codanagreg, String ulss, String tpscr) {
        return new Key(new Object[]{codanagreg, ulss, tpscr});
    }

}
