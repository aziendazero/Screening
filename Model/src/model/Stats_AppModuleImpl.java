package model;

import java.math.BigDecimal;

import java.sql.Connection;

import java.util.HashMap;
import java.util.Vector;

import model.commons.AccessManager;
import model.commons.ConfigurationConstants;
import model.commons.Parent_AppModuleImpl;
import model.commons.ViewHelper;

import model.conf.Cnf_SoAmbIstricViewImpl;
import model.conf.Cnf_SoAziendaViewImpl;
import model.conf.Cnf_SoCnfCentroPrelViewImpl;
import model.conf.Cnf_SoCnfCentroRefViewImpl;
import model.conf.Cnf_SoCnfEsitoinvitoRegionaleViewImpl;
import model.conf.Cnf_SoCnfSugg1livViewImpl;
import model.conf.Cnf_SoCnfSugg3livViewImpl;
import model.conf.Cnf_SoCnfTpinvitoRegionaleViewImpl;
import model.conf.Cnf_SoCnfTpinvitoViewImpl;
import model.conf.Cnf_SoCnfTpscrViewImpl;
import model.conf.Cnf_SoComuneViewImpl;
import model.conf.Cnf_SoDistrettoZonaViewImpl;

import model.print.Print_SoElencoSoggettiViewImpl;

import model.referto.Ref_SoCnfRef1livADEPREViewImpl;
import model.referto.Ref_SoCnfRef2livCOLPVLViewImpl;
import model.referto.Ref_SoCnfRef2livENDMOTViewImpl;
import model.referto.Ref_SoCnfRef2livINTTIPViewImpl;
import model.referto.Ref_SoCnfRef2livINTVALViewImpl;
import model.referto.Ref_SoCnfRef2livISTOLMViewImpl;
import model.referto.Ref_SoCnfRef2livISTOPNViewImpl;
import model.referto.Ref_SoCnfRef2livISTOPTViewImpl;

import model.round.Round_SoMedicoViewImpl;

import model.stats.Indicatore;
import model.stats.Stat_SoCnfCodEsitoInvitoViewImpl;
import model.stats.Stats_ClassiDiagnostiche1livViewImpl;
import model.stats.Stats_SoCnfCategTpinvitoViewImpl;
import model.stats.Stats_SoCnfEsclusioneViewImpl;
import model.stats.Stats_SoCnfEsitoinvitoViewImpl;
import model.stats.Stats_SoCnfRef1livGIUDIAViewImpl;
import model.stats.Stats_SoCnfRef1livINALIMViewImpl;
import model.stats.Stats_SoCnfRef1livMODREAViewImpl;
import model.stats.Stats_SoCnfRef1livMXEST1ViewImpl;
import model.stats.Stats_SoCnfRef1livPOSITIViewImpl;
import model.stats.Stats_SoCnfRef2livCO2LIVViewImpl;
import model.stats.Stats_SoCnfRef2livCOLPESViewImpl;
import model.stats.Stats_SoCnfRef2livENDCOMViewImpl;
import model.stats.Stats_SoCnfRef2livINTASCViewImpl;
import model.stats.Stats_SoCnfRef2livISTOCOViewImpl;
import model.stats.Stats_SoCnfRef2livMXAESTViewImpl;
import model.stats.Stats_SoCnfRef2livMXCESTViewImpl;
import model.stats.Stats_SoCnfRef2livMXEXECViewImpl;
import model.stats.Stats_SoCnfRef2livRACDIAViewImpl;
import model.stats.Stats_SoCnfRef2livRXCONCViewImpl;
import model.stats.Stats_SoCnfRef2livViewImpl;
import model.stats.Stats_SoCnfSugg2livViewImpl;
import model.stats.Stats_SoCnfTpinvitoViewImpl;
import model.stats.Stats_SoOpmedicoViewImpl;
import model.stats.Stats_SoStatsAggregazViewImpl;
import model.stats.Stats_StandardMatrixImpl;

import oracle.jbo.ViewObject;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---    Warning: Do not modify method signatures of generated methods.
//  ---------------------------------------------------------------------

public class Stats_AppModuleImpl extends Parent_AppModuleImpl implements model.common.Stats_AppModule       
{
  public Object printBean;

  /**
   * 
   *  This is the default constructor (do not remove)
   */
  public Stats_AppModuleImpl()
  {
  }

  /**
   * 
   *  Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("model", "Stats_AppModuleLocal");
   
  }
  

   public void filterConfiguration(String ulss,String scr,String codregionale,
      boolean regionale, String centri_in, Integer centro_fisico)
  {

  
    String where="TPSCR='"+scr+"'";
    
    String where2=null;
    if(!regionale)
    {
      where2="ULSS='"+ulss+"'";
    }
  
    //configurazione delle aziende sanitarie: se l'accesso non è regionale
    //l'utente vede solo la sua
    ViewObject vo=this.getCnf_SoAziendaView1();
    if(!regionale)
    {
      vo.setWhereClause("CODAZ='"+ulss+"'");
      vo.executeQuery();
      
      //filtro direttamente su comuni, zone, centri e medici
      //filtro i comuni in base alla ulss
       vo=this.getCnf_SoComuneView1();
        vo.setWhereClause(where2);
        vo.executeQuery();
      
      //filtro le zone in base alla ulss
        vo=this.getCnf_SoDistrettoZonaView1();
        vo.setWhereClause(where2);
        vo.executeQuery();
        
         //filtro i centri di prelievo in base alla ulss ed al tipo di screening
        vo=this.getCnf_SoCnfCentroPrelView1();
       String ad_hoc=where;
       if(where2!=null)
         ad_hoc+=" and "+where2;
        //se l'utente è legato ad un centro fisico, si filtra ulteriormente
   if(centri_in!=null)
    ad_hoc+=" AND (IDCENTRO IN "+centri_in+")";
  
        vo.setWhereClause(ad_hoc);
        vo.executeQuery();
        
        //filtro i centri di refertazione in base alla ulss ed al tipo di screening
        vo=this.getCnf_SoCnfCentroRefView1();
       ad_hoc=where;
       if(where2!=null)
         ad_hoc+=" and "+where2;
        vo.setWhereClause(ad_hoc);
        vo.executeQuery();
        
        //filtro i medici in base alla ulss 
        vo=this.getStats_SoMedicoView1();
        ad_hoc=where2;
        vo.setWhereClause(ad_hoc);
        vo.executeQuery();
        
    }
    else//altrimenti le vede tutte trane quella regionale
    {
      vo.setWhereClause("CODAZ<>'"+codregionale+"'");
      vo.executeQuery();
     
      //non devo trovare nessun comune, zona, centro o medico
      //filtro i comuni 
      vo=this.getCnf_SoComuneView1();
      vo.setWhereClause("1=2");
      vo.executeQuery();
      
      //filtro le zone 
      vo=this.getCnf_SoDistrettoZonaView1();
      vo.setWhereClause("1=2");
      vo.executeQuery();
      
       //filtro i centri in base alla ulss ed al tipo di screening
        vo=this.getCnf_SoCnfCentroPrelView1();
        vo.setWhereClause("1=2");
        vo.executeQuery();
        
        //filtro i centri di refertazione in base alla ulss ed al tipo di screening
        vo=this.getCnf_SoCnfCentroRefView1();
        vo.setWhereClause("1=2");
        vo.executeQuery();
        
        //filtro i medici in base alla ulss 
        vo=this.getStats_SoMedicoView1();
        vo.setWhereClause("1=2");
        vo.executeQuery();
    }
    
  
    
    //sugerimenti 
    vo=this.getStats_SoCnfSugg1livView1();
    String ad_hoc="Cnf_SoCnfSugg1liv."+where+" and Cnf_SoCnfSugg1liv.ULSS='"+codregionale+"'";
    vo.setWhereClause(ad_hoc);
    vo.setOrderByClause("ORDINE");
    vo.executeQuery();
    
    vo=this.getStats_SoCnfSugg2livView1();
    ad_hoc="Cnf_SoCnfSugg2liv."+where+" and Cnf_SoCnfSugg2liv.ULSS='"+codregionale+"'";
    vo.setWhereClause(ad_hoc);
     vo.setOrderByClause("ORDINE");
    vo.executeQuery();
    
    vo=this.getStats_SoCnfSugg3livView1();
    ad_hoc="Cnf_SoCnfSugg3liv."+where+" and Cnf_SoCnfSugg3liv.ULSS='"+codregionale+"'";
    vo.setWhereClause(ad_hoc);
    vo.setOrderByClause("ORDINE");
    vo.executeQuery();
    
    //configurazioni referti 1 e 2 livello scremate per ulss regionale
    vo=this.getStats_SoCnfRef1livGIUDIAView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_GIUDIA+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' AND IDCNFREF1L>"+ConfigurationConstants.CODICE_GIUDIA_DEFAULT;
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    //giudia per il colon
    vo=this.getStats_SoCnfRef1livGIUDIAView2();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_GIUDIA+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' AND IDCNFREF1L>"+ConfigurationConstants.CODICE_GIUDIA_NEGATIVO;
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    vo=this.getStats_SoCnfRef1livINALIMView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_INALIM+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"'";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    vo=this.getStats_SoCnfRef1livMODREAView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_MODREA+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"'";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    vo=this.getStats_SoCnfRef1livPOSITIView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_POSITI+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"'";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
     //usato nei filtri dinamici
    vo=this.getStats_SoCnfRef1livPOSITIView2();
    vo.setWhereClause(ad_hoc);
    vo.setOrderByClause("ORDINE");
    
    vo=this.getStats_SoCnfRef1livMXEST1View1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_ESITO_MA+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' AND IDCNFREF1L>0";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    vo=this.getStats_SoCnfRef1livMXEST1View2();
    vo.setWhereClause(ad_hoc);
    vo.setOrderByClause("Descrizione");
    vo.executeQuery();
    
   
    
    vo=this.getStats_SoCnfRef2livCOLPESView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_COLPES_2L+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' AND IDCNFREF2L>"+ConfigurationConstants.CODICE_COLPES_DEFAULT;
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    //usato nei filtri dinamici
    vo=this.getStats_SoCnfRef2livCOLPESView2();
    vo.setWhereClause(ad_hoc);
    vo.setOrderByClause("ORDINE");
    vo.executeQuery();
    
    vo=this.getStats_SoCnfRef2livRACDIAView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_RACDIA_2L+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"'";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    //usato nei filtri dinamici
    vo=this.getStats_SoCnfRef2livRACDIAView2();
    vo.setWhereClause(ad_hoc);
    vo.setOrderByClause("ORDINE");
    vo.executeQuery();
    
    vo=this.getStats_SoCnfRef2livCOLPVLView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_COLPVL_2L+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' ";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    vo=this.getStats_SoCnfRef1livADEPREView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_ADEPRE+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' AND IDCNFREF1L>"+ConfigurationConstants.CODICE_ADEPRE_DEFAULT;
    vo.setWhereClause(ad_hoc);
    vo.setOrderByClause("ORDINE");
    vo.executeQuery();
    
    vo=this.getStats_SoCnfRef2livINTTIPView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_INTTIP_2L+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"'";
    vo.setWhereClause(ad_hoc);
    vo.setOrderByClause("ORDINE");
    vo.executeQuery();
    
     vo=this.getStats_SoCnfRef2livINTVALView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_INTVAL_2L+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"'";
    vo.setWhereClause(ad_hoc);
     vo.setOrderByClause("ORDINE");
    vo.executeQuery();
    
    vo=this.getStats_SoCnfRef2livISTOCOView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_DIAGNOSI+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' ";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    //usata nei filtri dinamici
    vo=this.getStats_SoCnfRef2livISTOCOView2();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_DIAGNOSI+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' ";
    vo.setWhereClause(ad_hoc);
    vo.setOrderByClause("ORDINE");
    vo.executeQuery();
    
    vo=this.getStats_SoCnfRef2livCO2LIVView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_CONCL_CO+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' ";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    vo=this.getStats_SoCnfRef2livCO2LIVView2();
    vo.setWhereClause(ad_hoc);
    vo.setOrderByClause("ORDINE");
    vo.executeQuery();
    
    vo=this.getStats_SoCnfRef2livRXCONCView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_RXCONC+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' ";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    vo=this.getStats_SoCnfRef2livENDCOMView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_COMPLICANZE+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' ";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    vo=this.getRef_SoCnfRef2livENDMOTView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_MOTIVO+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' ";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    vo=this.getRef_SoCnfRef2livISTOLMView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_ISTOLM_2L+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' ";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    vo=this.getRef_SoCnfRef2livISTOPNView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_ISTOPN_2L+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' ";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    vo=this.getRef_SoCnfRef2livISTOPTView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_ISTOPT_2L+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' ";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    vo=this.getStats_SoCnfRef2livMXEXECView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_EXEC2L+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' ";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    vo=this.getStats_SoCnfRef2livMXCESTView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_ESITO_CITO+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' ";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    vo=this.getStats_SoCnfRef2livMXAESTView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_ESITO_AGOB+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' ";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    vo=this.getStats_SoCnfRef2livINTASCView1();
    ad_hoc="GRUPPO='"+ConfigurationConstants.NOME_GRUPPO_ASCELLA+"' AND TPSCR='"+scr+
    "' AND ULSS='"+codregionale+"' ";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    //operatori medici
    vo=this.getStats_SoOpmedicoView1();
    //operatori medici
    ad_hoc=where;
   if(where2!=null)
     ad_hoc+=" AND "+where2;
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    
    
    //tipi di invito
    vo=this.getStats_SoCnfTpinvitoView1();
    ad_hoc="A_SoCnfTpinvito.ULSS='"+codregionale+"' AND A_SoCnfTpinvito.TPSCR='"+scr+"'";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    //classi di diagnosi
    vo=this.getStats_ClassiDiagnostiche1livView1();
    ad_hoc=where+" AND ULSS='"+codregionale+"'";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
    
    
    //dati regionali
    vo=this.getStats_SoCnfTpinvitoRegionaleView1();
    vo.setWhereClause(ad_hoc);
     vo.setOrderByClause("ORDINE");
    vo.executeQuery();
    
    /*20110714 Serra: cambia il vo di riferimento pe rgli esiti
    vo=this.getCnf_SoCnfEsitoinvitoRegionaleView1();
    vo.setWhereClause(ad_hoc);
     vo.setOrderByClause("ORDINE");
    vo.executeQuery();
    */
    vo=this.getStat_SoCnfCodEsitoInvitoView1();
    vo.setWhereClauseParam(0,codregionale);
     vo.setWhereClauseParam(1,scr);
    vo.executeQuery();
    
     /*20080710 MOD: aggiunta categoria invito*/
    vo=this.getStats_SoCnfCategTpinvitoView2();
    vo.setWhereClause(ad_hoc);
    vo.setOrderByClause("IDCATEG");
    vo.executeQuery();
      /*20080710 FINE MOD*/
    
    //tipi di invito di 1 livello  
    vo=this.getCnf_SoCnfTpinvitoView1();
    ad_hoc = "Cnf_SoCnfTpinvito.ULSS = '"+ ulss + "' AND Cnf_SoCnfTpinvito.TPSCR ='"+ scr + "' AND Cnf_SoCnfTpinvito.LIVELLO = 1";
    vo.setWhereClause(ad_hoc);
    vo.executeQuery(); 
    
    
    //laboratori hpv
    vo=this.getCnf_SoAmbIstricView1();
    ad_hoc = where+" AND TPIST='1'";
     if(where2!=null)
       ad_hoc+=" AND "+where2;
    vo.setWhereClause(ad_hoc);
    vo.executeQuery();
     
    
  }

  /**
   * 
   *  Container's getter for Stats_InvitiEsitiMatrix
   */
  public Stats_StandardMatrixImpl getStats_InvitiEsitiMatrix()
  {
    return (Stats_StandardMatrixImpl)findViewObject("Stats_InvitiEsitiMatrix");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfTpinvitoView1
   */
  public Stats_SoCnfTpinvitoViewImpl getStats_SoCnfTpinvitoView1()
  {
    return (Stats_SoCnfTpinvitoViewImpl)findViewObject("Stats_SoCnfTpinvitoView1");
  }


  /**
   * 
   *  Container's getter for Cnf_SoAziendaView1
   */
  public Cnf_SoAziendaViewImpl getCnf_SoAziendaView1()
  {
    return (Cnf_SoAziendaViewImpl)findViewObject("Cnf_SoAziendaView1");
  }

  /**
   * 
   *  Container's getter for Cnf_SoCnfCentroPrelView1
   */
  public Cnf_SoCnfCentroPrelViewImpl getCnf_SoCnfCentroPrelView1()
  {
    return (Cnf_SoCnfCentroPrelViewImpl)findViewObject("Cnf_SoCnfCentroPrelView1");
  }

  /**
   * 
   *  Container's getter for Cnf_SoComuneView1
   */
  public Cnf_SoComuneViewImpl getCnf_SoComuneView1()
  {
    return (Cnf_SoComuneViewImpl)findViewObject("Cnf_SoComuneView1");
  }

  /**
   * 
   *  Container's getter for Cnf_SoDistrettoZonaView1
   */
  public Cnf_SoDistrettoZonaViewImpl getCnf_SoDistrettoZonaView1()
  {
    return (Cnf_SoDistrettoZonaViewImpl)findViewObject("Cnf_SoDistrettoZonaView1");
  }



  /**
   * 
   *  Container's getter for Stats_SoCnfEsclusioneView1
   */
  public Stats_SoCnfEsclusioneViewImpl getStats_SoCnfEsclusioneView1()
  {
    return (Stats_SoCnfEsclusioneViewImpl)findViewObject("Stats_SoCnfEsclusioneView1");
  }


 
  /**
   * 
   *  Container's getter for Cnf_SoCnfTpscrView1
   */
  public Cnf_SoCnfTpscrViewImpl getCnf_SoCnfTpscrView1()
  {
    return (Cnf_SoCnfTpscrViewImpl)findViewObject("Cnf_SoCnfTpscrView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfCategTpinvitoView1
   */
  public Stats_SoCnfCategTpinvitoViewImpl getStats_SoCnfCategTpinvitoView1()
  {
    return (Stats_SoCnfCategTpinvitoViewImpl)findViewObject("Stats_SoCnfCategTpinvitoView1");
  }



  /**
   * 
   *  Container's getter for Stats_SoCnfRef1livPOSITIView1
   */
  public Stats_SoCnfRef1livPOSITIViewImpl getStats_SoCnfRef1livPOSITIView1()
  {
    return (Stats_SoCnfRef1livPOSITIViewImpl)findViewObject("Stats_SoCnfRef1livPOSITIView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef1livINALIMView1
   */
  public Stats_SoCnfRef1livINALIMViewImpl getStats_SoCnfRef1livINALIMView1()
  {
    return (Stats_SoCnfRef1livINALIMViewImpl)findViewObject("Stats_SoCnfRef1livINALIMView1");
  }
  

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livCOLPESView1
   */
  public Stats_SoCnfRef2livCOLPESViewImpl getStats_SoCnfRef2livCOLPESView1()
  {
    return (Stats_SoCnfRef2livCOLPESViewImpl)findViewObject("Stats_SoCnfRef2livCOLPESView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livRACDIAView1
   */
  public Stats_SoCnfRef2livRACDIAViewImpl getStats_SoCnfRef2livRACDIAView1()
  {
    return (Stats_SoCnfRef2livRACDIAViewImpl)findViewObject("Stats_SoCnfRef2livRACDIAView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfSugg2livView1
   */
  public Stats_SoCnfSugg2livViewImpl getStats_SoCnfSugg2livView1()
  {
    return (Stats_SoCnfSugg2livViewImpl)findViewObject("Stats_SoCnfSugg2livView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef1livGIUDIAView1
   */
  public Stats_SoCnfRef1livGIUDIAViewImpl getStats_SoCnfRef1livGIUDIAView1()
  {
    return (Stats_SoCnfRef1livGIUDIAViewImpl)findViewObject("Stats_SoCnfRef1livGIUDIAView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef1livMODREAView1
   */
  public Stats_SoCnfRef1livMODREAViewImpl getStats_SoCnfRef1livMODREAView1()
  {
    return (Stats_SoCnfRef1livMODREAViewImpl)findViewObject("Stats_SoCnfRef1livMODREAView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoOpmedicoView1
   */
  public Stats_SoOpmedicoViewImpl getStats_SoOpmedicoView1()
  {
    return (Stats_SoOpmedicoViewImpl)findViewObject("Stats_SoOpmedicoView1");
  }


  

  public Vector returnPrintBean()
  {
    Vector v=new Vector();
    v.addElement(printBean);
    return v;
  }

  
  /**
   * 
   *  Container's getter for Stats_ClassiDiagnostiche1livView1
   */
  public Stats_ClassiDiagnostiche1livViewImpl getStats_ClassiDiagnostiche1livView1()
  {
    return (Stats_ClassiDiagnostiche1livViewImpl)findViewObject("Stats_ClassiDiagnostiche1livView1");
  }

  
  
   public HashMap callCoorteScreenatiNewFunction(
   String sesso,
    String ulss,
    String tpscr,
  //  Date dal,
  //  Date al_escl,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    BigDecimal coorti,
     /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
    )

  {
    Connection conn=this.getDBConnection();
    Indicatore ind=new Indicatore(conn,
                      "BEGIN  count_screenati_new(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?"+
                                                   /*20080707 MOD: aggiunta round inviti ai filtri*/
                                                   ",?,?"+
                                                   /*20080707 FINE MOD*/
                                                  "); END;");
    HashMap result=new HashMap();
    try
    {
      //imposto i tipi

      ind.initializeStandard();
      ind.addParamType("coorti","java.math.BigDecimal");
      ind.addParamType("sex","java.lang.String");
       
       /*20080707 MOD: aggiunta round inviti ai filtri*/
      ind.addParamType("solo_query","java.math.BigDecimal");
      ind.addParamType("round_inviti_","java.math.BigDecimal");
      /*20080707 FINE MOD*/
      
      //imposto i valori
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);
      ind.addParamValue("coorti",coorti);
      ind.addParamValue("sex",sesso);
      
       /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/
      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
    }
  //    return ind;
   return result;

  
  
  }

  /**
   * 
   *  Container's getter for Print_SoElencoSoggettiView1
   */
  public Print_SoElencoSoggettiViewImpl getPrint_SoElencoSoggettiView1()
  {
    return (Print_SoElencoSoggettiViewImpl)findViewObject("Print_SoElencoSoggettiView1");
  }


public HashMap callDiagnosi1livNewFunction( 
    BigDecimal lettore,
    BigDecimal prelevatore,
    BigDecimal supervisore,
    BigDecimal adepre,
    BigDecimal diagnosi,
    String gruppo,
    BigDecimal idcnfref,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    String categoria,
    BigDecimal coorti,
     /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
    )

                                  
  {
    Connection conn=this.getDBConnection();
    Indicatore ind=new Indicatore(conn,
                      "BEGIN  count_diagnosi_1liv_new(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?"+
                                                       /*20080707 MOD: aggiunta round inviti ai filtri*/
                                                       ",?,?"+
                                                       /*20080707 FINE MOD*/
                                                      "); END;");
    HashMap result=new HashMap();
    try
    {
      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("citoscr","java.math.BigDecimal");
      ind.addParamType("prelevatore","java.math.BigDecimal");
      ind.addParamType("supervisore","java.math.BigDecimal");
      ind.addParamType("diagnosi","java.math.BigDecimal");
      ind.addParamType("adeguatezza","java.math.BigDecimal");
      ind.addParamType("gruppo_target","java.lang.String");
      ind.addParamType("idcnf_target","java.math.BigDecimal");
      ind.addParamType("coorti","java.math.BigDecimal");
      ind.addParamType("tipo_esame","java.lang.String");
       /*20080707 MOD: aggiunta round inviti ai filtri*/
       ind.addParamType("solo_query","java.math.BigDecimal");
       ind.addParamType("round_inviti_","java.math.BigDecimal");
       /*20080707 FINE MOD*/
       
      //imposto i valori
       ind.addParamValue("citoscr",lettore);
      ind.addParamValue("prelevatore",prelevatore);
      ind.addParamValue("supervisore",supervisore);
      ind.addParamValue("diagnosi",diagnosi);
      ind.addParamValue("adeguatezza",adepre);
      ind.addParamValue("gruppo_target",gruppo);
      ind.addParamValue("idcnf_target",idcnfref);
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);
      ind.addParamValue("tipo_esame",categoria);
      ind.addParamValue("coorti",coorti);
       /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/

      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
    }
  //    return ind;
   return result;
  
  
  
   
  }
  
  public HashMap callDiagnosi1livMAFunction( 
    BigDecimal letture,
    BigDecimal lettore,
    BigDecimal esito,
    BigDecimal sugg,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    BigDecimal coorti,
    /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
   )

                                  
  {
    Connection conn=this.getDBConnection();
    Indicatore ind=new Indicatore(conn,
                      "BEGIN  count_diagnosi_1liv_ma(?,?,?,?,?,?,?,?,?,?,"+
                                                    "?,?,?,?,?,?,?,?,?,?,"+
                                                    "?,?"+
                                               /*20080709 MOD: aggiunta round inviti ai filtri*/
                                               ",?,?"+
                                               /*20080709 FINE MOD*/
                                              "); END;");
    HashMap result=new HashMap();
    try
    {
      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("letture","java.math.BigDecimal");
      ind.addParamType("lettore","java.math.BigDecimal");
      ind.addParamType("esito_","java.math.BigDecimal");
      ind.addParamType("sugg","java.math.BigDecimal");
      ind.addParamType("coorti","java.math.BigDecimal");

      /*20080709 MOD: aggiunta round inviti ai filtri*/
       ind.addParamType("solo_query","java.math.BigDecimal");
       ind.addParamType("round_inviti_","java.math.BigDecimal");
       /*20080709 FINE MOD*/


      
      //imposto i valori
       ind.addParamValue("lettore",lettore);
      ind.addParamValue("letture",letture);
      ind.addParamValue("esito_",esito);
      ind.addParamValue("sugg",sugg);
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);
      ind.addParamValue("coorti",coorti);
       /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/

      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
    }
  //    return ind;
   return result;
  
  
  
   
  }
  
  
  
  public HashMap callEsclusioniNewFunction( 
  String sesso,
    String data_escl,
    String tpescl,
    BigDecimal idescl,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    /*20080725 MOD*/
     BigDecimal solo_query
  /*20080725 FINE MOD*/)

  {
  
    Connection conn=this.getDBConnection();
    Indicatore ind=new Indicatore(conn,
                      "BEGIN  count_esclusioni_new(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?"+
                                               /*20080709 MOD: aggiunta solo_query ai filtri*/
                                               ",?"+
                                               /*20080709 FINE MOD*/
                                              "); END;");
    HashMap result=new HashMap();
    try
    {
      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("data_escl","java.lang.String");
      ind.addParamType("escl_type","java.lang.String");
      ind.addParamType("escl_id","java.math.BigDecimal");
      ind.addParamType("sex", "java.lang.String");

      /*20080709 MOD: aggiunta solo_query ai filtri*/
       ind.addParamType("solo_query","java.math.BigDecimal");
       /*20080709 FINE MOD*/


      //imposto i valori
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("escl_type",tpescl);
      ind.addParamValue("escl_id",idescl);
      ind.addParamValue("data_escl",data_escl);
      ind.addParamValue("sex",sesso);
        /*20080709 MOD: aggiunta round inviti ai filtri*/
       ind.addParamValue("solo_query",solo_query);
       /*20080709 FINE MOD*/
      
      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
    }
  //    return ind;
   return result;
  
  
   
  }
  

public HashMap callCount2livNewFunction( 
    BigDecimal idsugg,
    String gruppo,
    BigDecimal idcnfref,
    BigDecimal colpoval,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    BigDecimal coorti,
    /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
  )

                                  
  {
    Connection conn=this.getDBConnection();
    Indicatore ind=new Indicatore(conn,
                      "BEGIN  count_dati_2liv(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?"+
                       /*20080707 MOD: aggiunta round inviti ai filtri*/
                       ",?,?"+
                       /*20080707 FINE MOD*/
                      "); END;");
    HashMap result=new HashMap();
    try
    {
      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("sugg","java.math.BigDecimal");
      ind.addParamType("gruppo_target","java.lang.String");
      ind.addParamType("idcnf_target","java.math.BigDecimal");
      ind.addParamType("coorti","java.math.BigDecimal");
      ind.addParamType("colpo_val","java.math.BigDecimal");
      
      /*20080707 MOD: aggiunta round inviti ai filtri*/
       ind.addParamType("solo_query","java.math.BigDecimal");
       ind.addParamType("round_inviti_","java.math.BigDecimal");
       /*20080707 FINE MOD*/



      //imposto i valori

      ind.addParamValue("sugg",idsugg);
      ind.addParamValue("gruppo_target",gruppo);
      ind.addParamValue("idcnf_target",idcnfref);
      ind.addParamValue("colpo_val",colpoval);
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);
      ind.addParamValue("coorti",coorti);
      
       /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/
      

      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
    }
  //    return ind;
   return result;
  
  
  
   
  }
  
  public HashMap callCount2livCOFunction( 
  String sesso,
    BigDecimal idsugg,
    BigDecimal diagnosi,
    BigDecimal conclusioni,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    BigDecimal coorti,
    /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
    )

                                  
  {
    Connection conn=this.getDBConnection();
    Indicatore ind=new Indicatore(conn,
                      "BEGIN  count_dati_2liv_colon(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?"+
                                               /*20080707 MOD: aggiunta round inviti ai filtri*/
                                               ",?,?"+
                                               /*20080707 FINE MOD*/
                                              "); END;");
    HashMap result=new HashMap();
    try
    {
      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("sugg","java.math.BigDecimal");
      ind.addParamType("DIAGNOSI","java.math.BigDecimal");
      ind.addParamType("coorti","java.math.BigDecimal");
      ind.addParamType("CONCLUSIONI_","java.math.BigDecimal");
      ind.addParamType("sex", "java.lang.String");
      
      /*20080707 MOD: aggiunta round inviti ai filtri*/
       ind.addParamType("solo_query","java.math.BigDecimal");
       ind.addParamType("round_inviti_","java.math.BigDecimal");
       /*20080707 FINE MOD*/      
      
      //imposto i valori

      ind.addParamValue("sugg",idsugg);
      ind.addParamValue("DIAGNOSI",diagnosi);
      ind.addParamValue("CONCLUSIONI_",conclusioni);
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);
      ind.addParamValue("coorti",coorti);
      ind.addParamValue("sex",sesso);
      
  
       /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/
      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
     
    }
  //    return ind;
   return result;
  
  
  
   
  }
  
  public HashMap callCount2livMammoFunction( 
    BigDecimal idsugg,
    BigDecimal mammo,
    BigDecimal eco,
    BigDecimal clinic,
    BigDecimal esito_cito,
    BigDecimal esito_agob,
    BigDecimal diagnosi,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    BigDecimal coorti,
    /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
    )

                  
  {
    Connection conn=this.getDBConnection();
    Indicatore ind=new Indicatore(conn,
                      "BEGIN  count_dati_2liv_ma(?,?,?,?,?,?,?,?,?,?,"+
                                                "?,?,?,?,?,?,?,?,?,?,"+
                                                "?,?,?,?,?"+
                                               /*20080707 MOD: aggiunta round inviti ai filtri*/
                                               ",?,?"+
                                               /*20080707 FINE MOD*/
                                              "); END;");
    HashMap result=new HashMap();
    try
    {
      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("sugg","java.math.BigDecimal");
      ind.addParamType("mammo_exe","java.math.BigDecimal");
      ind.addParamType("eco_exe","java.math.BigDecimal");
      ind.addParamType("clinico_exe","java.math.BigDecimal");
      ind.addParamType("esito_cito","java.math.BigDecimal");
      ind.addParamType("esito_agob","java.math.BigDecimal");
      ind.addParamType("diagnosi_peg","java.math.BigDecimal");
      ind.addParamType("coorti","java.math.BigDecimal");

/*20080707 MOD: aggiunta round inviti ai filtri*/
       ind.addParamType("solo_query","java.math.BigDecimal");
       ind.addParamType("round_inviti_","java.math.BigDecimal");
       /*20080707 FINE MOD*/
      
      //imposto i valori

      ind.addParamValue("sugg",idsugg);
      ind.addParamValue("mammo_exe",mammo);
      ind.addParamValue("eco_exe",eco);
      ind.addParamValue("clinico_exe",clinic);
      ind.addParamValue("esito_cito",esito_cito);
      ind.addParamValue("esito_agob",esito_agob);
      ind.addParamValue("diagnosi_peg",diagnosi);
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);
      ind.addParamValue("coorti",coorti);
      
      /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/
      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
    }
  //    return ind;
   return result;
  
  
  
   
  }
  
   public  HashMap callInvitiEsitiNewFunction(
   String not_tpinvito,
   String sex,
   BigDecimal solleciti,
   int livello, 
    String tpinvito,
    BigDecimal cat_tpinvito,
    String tpesito,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    BigDecimal coorti,
    /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
    )

  {
  Connection conn=this.getDBConnection();
    Indicatore ind=new Indicatore(conn,
                      "BEGIN  count_inviti_esiti_new(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?"+
                                                      /*20080704 MOD: aggiunta round inviti ai filtri*/
                                                      ",?,?"+
                                                      /*20080704 FINE MOD*/
                                                      "); END;");
    HashMap result=new HashMap();
    try
    {

      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("solleciti","java.math.BigDecimal");
      ind.addParamType("liv","java.math.BigDecimal");
      ind.addParamType("id_tipo_invito","java.lang.String");
      ind.addParamType("id_categ_tpinvito","java.math.BigDecimal");
      ind.addParamType("id_esito","java.lang.String");
      ind.addParamType("coorti","java.math.BigDecimal");
      ind.addParamType("sex","java.lang.String");
      ind.addParamType("NOT_tipo_invito","java.lang.String");

 /*20080704 MOD: aggiunta round inviti ai filtri*/
      ind.addParamType("round_inviti_","java.math.BigDecimal");
      ind.addParamType("solo_query","java.math.BigDecimal");
  /*20080704 FINE MOD*/
      
      //imposto i valori
      ind.addParamValue("solleciti",solleciti);
      ind.addParamValue("liv",new BigDecimal(livello));
      ind.addParamValue("id_tipo_invito",tpinvito);
      ind.addParamValue("id_categ_tpinvito",cat_tpinvito);
      ind.addParamValue("id_esito",tpesito);
      ind.addParamValue("sex",sex);
      ind.addParamValue("NOT_tipo_invito",not_tpinvito);
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);
      ind.addParamValue("coorti",coorti);
      
      
       /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/

      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
    }
  //    return ind;
   return result;

  


   
  }
  

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livView1
   */
  public Stats_SoCnfRef2livViewImpl getStats_SoCnfRef2livView1()
  {
    return (Stats_SoCnfRef2livViewImpl)findViewObject("Stats_SoCnfRef2livView1");
  }
  
  
  public  HashMap callSuggerimentiFunction(
   String sesso,
   int livello, 
   BigDecimal sugg,
    String forma_agg,
    String forma_est,
    String agg,
    String est,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    BigDecimal coorti,
    /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
    )

  {
  Connection conn=this.getDBConnection();
  String proc_name=(String)ViewHelper.decodeByTpscr(tpscr,"COUNT_SUGGERIMENTI(","COUNT_SUGGERIMENTI_CO(?,","COUNT_SUGGERIMENTI_MA(",null,null);
    
    Indicatore ind=new Indicatore(conn,
                      "BEGIN  "+proc_name+"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?"+
                                               /*20080707 MOD: aggiunta round inviti ai filtri*/
                                               ",?,?"+
                                               /*20080707 FINE MOD*/
                                              "); END;");
    HashMap result=new HashMap();
    try
    {
        
      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("sugg","java.math.BigDecimal");
      ind.addParamType("aggregato_","java.lang.String");
      ind.addParamType("livello","java.math.BigDecimal");
      ind.addParamType("esteso_","java.lang.String");
      ind.addParamType("forma_ag","java.lang.String");
      ind.addParamType("forma_est","java.lang.String");
      ind.addParamType("coorti","java.math.BigDecimal");
      

      /*20080707 MOD: aggiunta round inviti ai filtri*/
       ind.addParamType("solo_query","java.math.BigDecimal");
       ind.addParamType("round_inviti_","java.math.BigDecimal");
       /*20080707 FINE MOD*/      

      //imposto i valori
      ind.addParamValue("sugg",sugg);
      ind.addParamValue("livello",new BigDecimal(livello));
      ind.addParamValue("aggregato_",agg);
      ind.addParamValue("esteso_",est);
      ind.addParamValue("forma_ag",forma_agg);
      ind.addParamValue("forma_est",forma_est);
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);
      ind.addParamValue("coorti",coorti);
      
      
 /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/

      if("CO".equals(tpscr))
      {
        ind.addParamType("sex","java.lang.String");
        
        ind.addParamValue("sex",sesso);
      }
      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
    
      
      conn=null;
    }

   return result;

  


   
  }
  
  public HashMap callDatiApprofondimentiCOFunction( 
    BigDecimal soloScreenati,
    BigDecimal colonscopia,
    BigDecimal rx_colon,
    BigDecimal complicanze,
    BigDecimal conclusioni,
    String sesso,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    BigDecimal coorti,//coorti
    /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
  )

                                  
  {
    Connection conn=this.getDBConnection();
    Indicatore ind=new Indicatore(conn,
                      "BEGIN  COUNT_DATI_APPROFONDIMENTO_CO(?,?,?,?,?,?,?,?,?,?,"+
                                                            "?,?,?,?,?,?,?,?,?,?,"+
                                                            "?,?,?,?"+
                                               /*20080708 MOD: aggiunta round inviti ai filtri*/
                                               ",?,?"+
                                               /*20080708 FINE MOD*/
                                              "); END;");
    HashMap result=new HashMap();
    try
    {
      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("solo_screenati","java.math.BigDecimal");
      ind.addParamType("colonscopia","java.math.BigDecimal");
      ind.addParamType("coorti","java.math.BigDecimal");
      ind.addParamType("CONCLUSIONI_","java.math.BigDecimal");
      ind.addParamType("complicanze_","java.math.BigDecimal");
      ind.addParamType("rx_colon_exe","java.math.BigDecimal");
      ind.addParamType("sex", "java.lang.String");
      /*20080708 MOD: aggiunta round inviti ai filtri*/
       ind.addParamType("solo_query","java.math.BigDecimal");
       ind.addParamType("round_inviti_","java.math.BigDecimal");
       /*20080708 FINE MOD*/
      
      //imposto i valori

      ind.addParamValue("solo_screenati",soloScreenati);
      ind.addParamValue("colonscopia",colonscopia);
      ind.addParamValue("CONCLUSIONI_",conclusioni);
      ind.addParamValue("complicanze_",complicanze);
      ind.addParamValue("rx_colon_exe",rx_colon);
      
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);
      ind.addParamValue("coorti",coorti);
      ind.addParamValue("sex",sesso);
       /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/   
  

      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
     
    }
  //    return ind;
   return result;
  
  
  
   
  }
  
  public HashMap callDatiApprofondimentiMAFunction( 
    BigDecimal tipo,
    BigDecimal soglia_exec,
    BigDecimal soglia_exec_int,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    BigDecimal coorti,
   /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
    )

                                  
  {
    Connection conn=this.getDBConnection();
    Indicatore ind=new Indicatore(conn,
                      "BEGIN  COUNT_DATI_APPROFONDIMENTO_MA(?,?,?,?,?,?,?,?,?,?,"+
                                                            "?,?,?,?,?,?,?,?,?,?,"+
                                                            "?"+
                                               /*20080708 MOD: aggiunta round inviti ai filtri*/
                                               ",?,?"+
                                               /*20080708 FINE MOD*/
                                              "); END;");
    HashMap result=new HashMap();
    try
    {
      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("tipo","java.math.BigDecimal");
      ind.addParamType("soglia_exec","java.math.BigDecimal");
      ind.addParamType("coorti","java.math.BigDecimal");
      ind.addParamType("soglia_exec_int","java.math.BigDecimal");

      /*20080708 MOD: aggiunta round inviti ai filtri*/
       ind.addParamType("solo_query","java.math.BigDecimal");
       ind.addParamType("round_inviti_","java.math.BigDecimal");
       /*20080708 FINE MOD*/
      
      //imposto i valori

      ind.addParamValue("tipo",tipo);
      ind.addParamValue("soglia_exec",soglia_exec);
      ind.addParamValue("soglia_exec_int",soglia_exec_int);
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);
      ind.addParamValue("coorti",coorti);
      
      /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/

      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
     
    }
  //    return ind;
   return result;
  
  
  
   
  }
  
   public HashMap callDetectionRateCOFunction( 
    BigDecimal conclusioni,
    BigDecimal istologia,
    String sesso,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    BigDecimal coorti,
    /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
    )
                                  
  {
    Connection conn=this.getDBConnection();
    Indicatore ind=new Indicatore(conn,
                      "BEGIN  COUNT_DETECTIONRATE_CO(?,?,?,?,?,?,?,?,?,?,"+
                                                    "?,?,?,?,?,?,?,?,?,?,"+
                                                     "?"+
                                               /*20080708 MOD: aggiunta round inviti ai filtri*/
                                               ",?,?"+
                                               /*20080708 FINE MOD*/
                                              "); END;");
    HashMap result=new HashMap();
    try
    {
      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("coorti","java.math.BigDecimal");
      ind.addParamType("CONCLUSIONI_","java.math.BigDecimal");
      ind.addParamType("istologia_cancro","java.math.BigDecimal");
      ind.addParamType("sex", "java.lang.String");
      /*20080708 MOD: aggiunta round inviti ai filtri*/
       ind.addParamType("solo_query","java.math.BigDecimal");
       ind.addParamType("round_inviti_","java.math.BigDecimal");
       /*20080708 FINE MOD*/
      //imposto i valori

      ind.addParamValue("CONCLUSIONI_",conclusioni);
      ind.addParamValue("istologia_cancro",istologia);
      
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);
      ind.addParamValue("coorti",coorti);
      ind.addParamValue("sex",sesso);
     /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/
      
  

      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
     
    }
  //    return ind;
   return result;
  
  
  
   
  }
  
  public HashMap callDetectionRateMAFunction( 
    BigDecimal lettore,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
   )
                                  
  {
    Connection conn=this.getDBConnection();
    Indicatore ind=new Indicatore(conn,
                      "BEGIN  COUNT_DETECTIONRATE_MA(?,?,?,?,?,?,?,?,?,?,"+
                                                    "?,?,?,?,?,?,?,?"+
                                               /*20080708 MOD: aggiunta round inviti ai filtri*/
                                               ",?,?"+
                                               /*20080708 FINE MOD*/
                                              "); END;");
    HashMap result=new HashMap();
    try
    {
      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("lettore","java.math.BigDecimal");
      /*20080708 MOD: aggiunta round inviti ai filtri*/
       ind.addParamType("solo_query","java.math.BigDecimal");
       ind.addParamType("round_inviti_","java.math.BigDecimal");
       /*20080708 FINE MOD*/
       
      ind.addParamValue("lettore",lettore);
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);
      /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/


      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
     
    }
  //    return ind;
   return result;
  
  
  
   
  }
  
  public HashMap callChirurgieCO( 
    BigDecimal soloinviati,
    String esecuzione,
    BigDecimal motivo,
    BigDecimal invio3liv,
    BigDecimal lesione,
    String sesso,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    BigDecimal coorti,
    /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
    )

                                  
  {
    Connection conn=this.getDBConnection();
    String nome=(String)ViewHelper.decodeByTpscr(tpscr,null,"COUNT_CHIRURGIE_CO","COUNT_CHIRURGIE_MA",null,null);
    Indicatore ind=new Indicatore(conn,
                      "BEGIN "+nome+"(?,?,?,?,?,?,?,?,?,?,"+
                                                            "?,?,?,?,?,?,?,?,?,?,"+
                                                            "?,?,?,?"+
                                               /*20080709 MOD: aggiunta round inviti ai filtri*/
                                               ",?,?"+
                                               /*20080709 FINE MOD*/
                                              "); END;");
    HashMap result=new HashMap();
    try
    {
      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("solo_inviati","java.math.BigDecimal");
      ind.addParamType("esecuzione","java.lang.String");
      ind.addParamType("motivo_inex","java.math.BigDecimal");
      ind.addParamType("CONCLUSIONI_","java.math.BigDecimal");
      ind.addParamType("invio_3liv","java.math.BigDecimal");
      ind.addParamType("sex", "java.lang.String");
      ind.addParamType("coorti", "java.math.BigDecimal");
      /*20080709 MOD: aggiunta round inviti ai filtri*/
       ind.addParamType("solo_query","java.math.BigDecimal");
       ind.addParamType("round_inviti_","java.math.BigDecimal");
       /*20080709 FINE MOD*/
       
      //imposto i valori

      ind.addParamValue("solo_inviati",soloinviati);
      ind.addParamValue("esecuzione",esecuzione);
      ind.addParamValue("CONCLUSIONI_",lesione);
      ind.addParamValue("motivo_inex",motivo);
      ind.addParamValue("invio_3liv",invio3liv);
      
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);
      ind.addParamValue("coorti",coorti);
      ind.addParamValue("sex",sesso);
      
 /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/   
  

      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
     
    }
  //    return ind;
   return result;
  
  
  
   
  }
  
  public HashMap callPnPt( 
    String pn,
    String pt,
    String aggregaz_pn,
    String aggregaz_pt,
    BigDecimal aggregaz_type,
    BigDecimal lesione,
    String sesso,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    BigDecimal coorti,
    /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
    )

                                  
  {
    Connection conn=this.getDBConnection();
    Indicatore ind=new Indicatore(conn,
                      "BEGIN  COUNT_PT_PN(?,?,?,?,?,?,?,?,?,?,"+
                                          "?,?,?,?,?,?,?,?,?,?,"+
                                          "?,?,?,?,?"+
                                               /*20080709 MOD: aggiunta round inviti ai filtri*/
                                               ",?,?"+
                                               /*20080709 FINE MOD*/
                                              "); END;");
    HashMap result=new HashMap();
    try
    {
      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("pn","java.lang.String");
      ind.addParamType("pt","java.lang.String");
      ind.addParamType("pn_aggregaz","java.lang.String");
      ind.addParamType("pt_aggregaz","java.lang.String");
      ind.addParamType("agg_type","java.math.BigDecimal");
      ind.addParamType("CONCLUSIONI_","java.math.BigDecimal");
      ind.addParamType("sex", "java.lang.String");
      ind.addParamType("coorti", "java.math.BigDecimal");
      /*20080709 MOD: aggiunta round inviti ai filtri*/
       ind.addParamType("solo_query","java.math.BigDecimal");
       ind.addParamType("round_inviti_","java.math.BigDecimal");
       /*20080709 FINE MOD*/

    
      //imposto i valori

      ind.addParamValue("pn",pn);
      ind.addParamValue("pt",pt);
      ind.addParamValue("pn_aggregaz",aggregaz_pn);
      ind.addParamValue("pt_aggregaz",aggregaz_pt);
      ind.addParamValue("agg_type",aggregaz_type);
      ind.addParamValue("CONCLUSIONI_",lesione);    
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);
      ind.addParamValue("coorti",coorti);
      ind.addParamValue("sex",sesso);
       /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/        
  

      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
     
    }
  //    return ind;
   return result;
  
  
  
   
  }


  /**
   * 
   *  Container's getter for Stats_SoStatsAggregazView1
   */
  public Stats_SoStatsAggregazViewImpl getStats_SoStatsAggregazView1()
  {
    return (Stats_SoStatsAggregazViewImpl)findViewObject("Stats_SoStatsAggregazView1");
  }
  
  
   public  HashMap callTempiFunction( 
    BigDecimal min,
    BigDecimal max,
    BigDecimal positivi,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    BigDecimal coorti,
    /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
    )

  {
    Connection conn=this.getDBConnection();
    String proc_name=(String)ViewHelper.decodeByTpscr(tpscr,"count_tempi","count_tempi_colon","count_tempi_ma",null,null);
    
    Indicatore ind=new Indicatore(conn,
                      "BEGIN  "+proc_name+"(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?"+
                                               /*20080707 MOD: aggiunta round inviti ai filtri*/
                                               ",?,?"+
                                               /*20080707 FINE MOD*/
                                              "); END;");

    HashMap result=new HashMap();
    try
    {
      if(proc_name==null)
         throw new Exception("Nessuna procedura definita per questo tipo di screening");

      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("min_giorni","java.math.BigDecimal");
      ind.addParamType("max_giorni","java.math.BigDecimal");
      ind.addParamType("positivi","java.math.BigDecimal");
      ind.addParamType("coorti","java.math.BigDecimal");


      /*20080707 MOD: aggiunta round inviti ai filtri*/
       ind.addParamType("solo_query","java.math.BigDecimal");
       ind.addParamType("round_inviti_","java.math.BigDecimal");
       /*20080707 FINE MOD*/

      //imposto i valori
      ind.addParamValue("min_giorni",min);
      ind.addParamValue("max_giorni",max);
      ind.addParamValue("positivi",positivi);
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);
      ind.addParamValue("coorti",coorti);
      
       /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/
      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
    }

   return result;

  


   
  }
  
  
   public  HashMap callPeriodismoFunction( 
    String sesso,
    BigDecimal min,
    BigDecimal max,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
    )

  {
  Connection conn=this.getDBConnection();
  String proc_name=(String)ViewHelper.decodeByTpscr(tpscr,"count_periodismo(","count_periodismo_co(?,","count_periodismo(",null,null);
    Indicatore ind=new Indicatore(conn,
                      "BEGIN "+proc_name+"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?"+
                                               /*20080708 MOD: aggiunta round inviti ai filtri*/
                                               ",?,?"+
                                               /*20080708 FINE MOD*/
                                              "); END;");
    HashMap result=new HashMap();
    try
    {

      if(proc_name==null)
        throw new Exception("Indicatore non previsto per questo tipo di screening");
      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("min_mesi","java.math.BigDecimal");
      ind.addParamType("max_mesi","java.math.BigDecimal");

      /*20080708 MOD: aggiunta round inviti ai filtri*/
       ind.addParamType("solo_query","java.math.BigDecimal");
       ind.addParamType("round_inviti_","java.math.BigDecimal");
       /*20080708 FINE MOD*/

      //imposto i valori
      ind.addParamValue("min_mesi",min);
      ind.addParamValue("max_mesi",max);
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);

       /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/
      
      if("CO".equals(tpscr))
      {
        ind.addParamType("sex", "java.lang.String");

        ind.addParamValue("sex",sesso);
      }
      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
    }

   return result;

  


   
  }
  
  public void storePrintBean(Vector printBean)
  {
    this.printBean = (Object)printBean.elementAt(0);
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfTpinvitoRegionaleView1
   */
  public Cnf_SoCnfTpinvitoRegionaleViewImpl getStats_SoCnfTpinvitoRegionaleView1()
  {
    return (Cnf_SoCnfTpinvitoRegionaleViewImpl)findViewObject("Stats_SoCnfTpinvitoRegionaleView1");
  }

  /**
   * 
   *  Container's getter for Cnf_SoCnfEsitoinvitoRegionaleView1
   */
  public Cnf_SoCnfEsitoinvitoRegionaleViewImpl getCnf_SoCnfEsitoinvitoRegionaleView1()
  {
    return (Cnf_SoCnfEsitoinvitoRegionaleViewImpl)findViewObject("Cnf_SoCnfEsitoinvitoRegionaleView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef1livADEPREView1
   */
  public Ref_SoCnfRef1livADEPREViewImpl getStats_SoCnfRef1livADEPREView1()
  {
    return (Ref_SoCnfRef1livADEPREViewImpl)findViewObject("Stats_SoCnfRef1livADEPREView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livCOLPVLView1
   */
  public Ref_SoCnfRef2livCOLPVLViewImpl getStats_SoCnfRef2livCOLPVLView1()
  {
    return (Ref_SoCnfRef2livCOLPVLViewImpl)findViewObject("Stats_SoCnfRef2livCOLPVLView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfSugg1livView1
   */
  public Cnf_SoCnfSugg1livViewImpl getStats_SoCnfSugg1livView1()
  {
    return (Cnf_SoCnfSugg1livViewImpl)findViewObject("Stats_SoCnfSugg1livView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfSugg3livView1
   */
  public Cnf_SoCnfSugg3livViewImpl getStats_SoCnfSugg3livView1()
  {
    return (Cnf_SoCnfSugg3livViewImpl)findViewObject("Stats_SoCnfSugg3livView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livINTTIPView1
   */
  public Ref_SoCnfRef2livINTTIPViewImpl getStats_SoCnfRef2livINTTIPView1()
  {
    return (Ref_SoCnfRef2livINTTIPViewImpl)findViewObject("Stats_SoCnfRef2livINTTIPView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livINTVALView1
   */
  public Ref_SoCnfRef2livINTVALViewImpl getStats_SoCnfRef2livINTVALView1()
  {
    return (Ref_SoCnfRef2livINTVALViewImpl)findViewObject("Stats_SoCnfRef2livINTVALView1");
  }



   public  HashMap callIndicazioni2livFunction( 
   String sesso,
    BigDecimal tipo_calcolo,
    String esito,
    BigDecimal livello,
    BigDecimal giudia,
    BigDecimal adepre,
    String gruppo,
    BigDecimal idcnf,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    BigDecimal coorti,//coorti
    /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
    )

  {
  Connection conn=this.getDBConnection();
  String cmd=(String)ViewHelper.decodeByTpscr(tpscr,
        "begin count_indicazioni_2liv(?,?,?,?,?,?,?,?,?,?,"+
                                     "?,?,?,?,?,?,?,?,?,?,"+
                                     "?,?,?,?,?"+
                                               /*20080708 MOD: aggiunta round inviti ai filtri*/
                                               ",?,?"+
                                               /*20080708 FINE MOD*/
                                              "); END;",
        "begin count_indicazioni_CO(?,?,?,?,?,?,?,?,?,?,"+
                                   "?,?,?,?,?,?,?,?,?,?,"+
                                   "?,?,?"+
                                               /*20080708 MOD: aggiunta round inviti ai filtri*/
                                               ",?,?"+
                                               /*20080708 FINE MOD*/
                                              "); END;",
        "begin count_indicazioni_ma(?,?,?,?,?,?,?,?,?,?,"+
                                   "?,?,?,?,?,?,?,?,?,?,"+
                                   "?,?"+
                                               /*20080708 MOD: aggiunta round inviti ai filtri*/
                                               ",?,?"+
                                               /*20080708 FINE MOD*/
                                              "); END;",null,null);
  String esitoname=(String)ViewHelper.decodeByTpscr(tpscr,"esito","esito","esito_",null,null);
  
    Indicatore ind=new Indicatore(conn,cmd);
                 
    HashMap result=new HashMap();
    try
    {
      if(cmd == null)
        throw new Exception("Indicatore non previsto per questo tipo di screening");
      
      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("tipo_calcolo","java.math.BigDecimal");
      ind.addParamType(esitoname,"java.lang.String");
      ind.addParamType("livello_esito","java.math.BigDecimal");
      ind.addParamType("diagnosi","java.math.BigDecimal");
      ind.addParamType("coorti","java.math.BigDecimal");
      
      /*20080708 MOD: aggiunta round inviti ai filtri*/
       ind.addParamType("solo_query","java.math.BigDecimal");
       ind.addParamType("round_inviti_","java.math.BigDecimal");
       /*20080708 FINE MOD*/
     
      //imposto i valori
      ind.addParamValue("tipo_calcolo",tipo_calcolo);
      ind.addParamValue(esitoname,esito);
      ind.addParamValue("livello_esito",livello);
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("diagnosi",giudia);
     
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);
      ind.addParamValue("coorti",coorti);
      
       /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/

      
       if("CI".equals(tpscr))
      {
        ind.addParamType("adeguatezza","java.math.BigDecimal");
        ind.addParamType("gruppo_target","java.lang.String");
        ind.addParamType("idcnf_target","java.math.BigDecimal");
        
        ind.addParamValue("adeguatezza",adepre);
        ind.addParamValue("gruppo_target",gruppo);
        ind.addParamValue("idcnf_target",idcnf);
      }
      if("CO".equals(tpscr))
      {
        ind.addParamType("sex", "java.lang.String");

        ind.addParamValue("sex",sesso);
      }

      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
    }

   return result;

  


   
  }
  
  public  HashMap callEndoscopieFunction(
  String sesso,
    BigDecimal tipo_calcolo,
    BigDecimal endoscopista,
    BigDecimal endo_number,
    BigDecimal extension,
    BigDecimal complic,
    BigDecimal conclusione,
    String ulss,
    String tpscr,
    String dal,
    String al_escl,
    BigDecimal round_ind_da,
    BigDecimal round_ind_a,
    BigDecimal round_org,
    BigDecimal centro_prelievo,
    BigDecimal zona,
    BigDecimal eta_da,
    BigDecimal eta_a,
    String comune,
    BigDecimal isVolontaria,
    BigDecimal coorti,
    /*20080725 MOD: aggiunta round inviti ai filtri*/
     BigDecimal round_inviti,
     BigDecimal solo_query
  /*20080725 FINE MOD*/
    )

  {
    Connection conn=this.getDBConnection();
   
    
    Indicatore ind=new Indicatore(conn,
                      "BEGIN  count_endoscopie(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?"+
                                               /*20080709 MOD: aggiunta round inviti ai filtri*/
                                               ",?,?"+
                                               /*20080709 FINE MOD*/
                                              "); END;");
    HashMap result=new HashMap();
    try
    {
     
      //imposto i tipi
      ind.initializeStandard();
      ind.addParamType("tipo_calcolo","java.math.BigDecimal");
      ind.addParamType("endoscopista","java.math.BigDecimal");
      ind.addParamType("endo_number","java.math.BigDecimal");
      ind.addParamType("extension","java.math.BigDecimal");
      ind.addParamType("complic","java.math.BigDecimal");
      ind.addParamType("conclusione","java.math.BigDecimal");
      ind.addParamType("coorti","java.math.BigDecimal");
      ind.addParamType("sex", "java.lang.String");

      /*20080709 MOD: aggiunta round inviti ai filtri*/
       ind.addParamType("solo_query","java.math.BigDecimal");
       ind.addParamType("round_inviti_","java.math.BigDecimal");
       /*20080709 FINE MOD*/


      //imposto i valori
      ind.addParamValue("tipo_calcolo",tipo_calcolo);
       ind.addParamValue("endoscopista",endoscopista);
      ind.addParamValue("endo_number",endo_number);
      ind.addParamValue("extension",extension);
      ind.addParamValue("conclusione",conclusione);
      ind.addParamValue("complic",complic);
      ind.addParamValue("this_ulss",ulss);
      ind.addParamValue("ulss_reg",AccessManager.CODREGIONALE);
      ind.addParamValue("this_tpscr",tpscr);
      ind.addParamValue("dal",dal);
      ind.addParamValue("al_escluso",al_escl);
      ind.addParamValue("round_ind_da",round_ind_da);
      ind.addParamValue("round_ind_a",round_ind_a);
      ind.addParamValue("round_org",round_org);
      ind.addParamValue("centro_prel",centro_prelievo);
      ind.addParamValue("cod_zona",zona);
      ind.addParamValue("eta_da",eta_da);
      ind.addParamValue("eta_a",eta_a);
      ind.addParamValue("comune",comune);
      ind.addParamValue("is_volontaria",isVolontaria);
      ind.addParamValue("coorti",coorti);
      ind.addParamValue("sex",sesso);
      /*20080725 MOD: aggiunta round inviti ai filtri*/
      ind.addParamValue("solo_query",solo_query);
      ind.addParamValue("round_inviti_",round_inviti);
      /*20080725 FINE MOD*/     

      
      ind.execute();
      
      
    }
    catch(Exception ex)
    {
      ind.setErrore(ex.getMessage());
    }
    finally
    {
      result.put("howmany",new Integer(ind.getCount()));
   //   result.put("list",ind.getList());
      result.put("errore",ind.getErrore());
      result.put("query",ind.getQuery());
      
      conn=null;
    }

   return result;

  


   
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfEsitoinvitoView1
   */
  public Stats_SoCnfEsitoinvitoViewImpl getStats_SoCnfEsitoinvitoView1()
  {
    return (Stats_SoCnfEsitoinvitoViewImpl)findViewObject("Stats_SoCnfEsitoinvitoView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livISTOCOView1
   */
  public Stats_SoCnfRef2livISTOCOViewImpl getStats_SoCnfRef2livISTOCOView1()
  {
    return (Stats_SoCnfRef2livISTOCOViewImpl)findViewObject("Stats_SoCnfRef2livISTOCOView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livCO2LIVView1
   */
  public Stats_SoCnfRef2livCO2LIVViewImpl getStats_SoCnfRef2livCO2LIVView1()
  {
    return (Stats_SoCnfRef2livCO2LIVViewImpl)findViewObject("Stats_SoCnfRef2livCO2LIVView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef1livGIUDIAView2
   */
  public Stats_SoCnfRef1livGIUDIAViewImpl getStats_SoCnfRef1livGIUDIAView2()
  {
    return (Stats_SoCnfRef1livGIUDIAViewImpl)findViewObject("Stats_SoCnfRef1livGIUDIAView2");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livRXCONCView1
   */
  public Stats_SoCnfRef2livRXCONCViewImpl getStats_SoCnfRef2livRXCONCView1()
  {
    return (Stats_SoCnfRef2livRXCONCViewImpl)findViewObject("Stats_SoCnfRef2livRXCONCView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livENDCOMView1
   */
  public Stats_SoCnfRef2livENDCOMViewImpl getStats_SoCnfRef2livENDCOMView1()
  {
    return (Stats_SoCnfRef2livENDCOMViewImpl)findViewObject("Stats_SoCnfRef2livENDCOMView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livCO2LIVView2
   */
  public Stats_SoCnfRef2livCO2LIVViewImpl getStats_SoCnfRef2livCO2LIVView2()
  {
    return (Stats_SoCnfRef2livCO2LIVViewImpl)findViewObject("Stats_SoCnfRef2livCO2LIVView2");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livISTOCOView2
   */
  public Stats_SoCnfRef2livISTOCOViewImpl getStats_SoCnfRef2livISTOCOView2()
  {
    return (Stats_SoCnfRef2livISTOCOViewImpl)findViewObject("Stats_SoCnfRef2livISTOCOView2");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livRACDIAView2
   */
  public Stats_SoCnfRef2livRACDIAViewImpl getStats_SoCnfRef2livRACDIAView2()
  {
    return (Stats_SoCnfRef2livRACDIAViewImpl)findViewObject("Stats_SoCnfRef2livRACDIAView2");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livCOLPESView2
   */
  public Stats_SoCnfRef2livCOLPESViewImpl getStats_SoCnfRef2livCOLPESView2()
  {
    return (Stats_SoCnfRef2livCOLPESViewImpl)findViewObject("Stats_SoCnfRef2livCOLPESView2");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef1livPOSITIView2
   */
  public Stats_SoCnfRef1livPOSITIViewImpl getStats_SoCnfRef1livPOSITIView2()
  {
    return (Stats_SoCnfRef1livPOSITIViewImpl)findViewObject("Stats_SoCnfRef1livPOSITIView2");
  }

  /**
   * 
   *  Container's getter for Ref_SoCnfRef2livENDMOTView1
   */
  public Ref_SoCnfRef2livENDMOTViewImpl getRef_SoCnfRef2livENDMOTView1()
  {
    return (Ref_SoCnfRef2livENDMOTViewImpl)findViewObject("Ref_SoCnfRef2livENDMOTView1");
  }

  /**
   * 
   *  Container's getter for Ref_SoCnfRef2livISTOLMView1
   */
  public Ref_SoCnfRef2livISTOLMViewImpl getRef_SoCnfRef2livISTOLMView1()
  {
    return (Ref_SoCnfRef2livISTOLMViewImpl)findViewObject("Ref_SoCnfRef2livISTOLMView1");
  }

  /**
   * 
   *  Container's getter for Ref_SoCnfRef2livISTOPNView1
   */
  public Ref_SoCnfRef2livISTOPNViewImpl getRef_SoCnfRef2livISTOPNView1()
  {
    return (Ref_SoCnfRef2livISTOPNViewImpl)findViewObject("Ref_SoCnfRef2livISTOPNView1");
  }

  /**
   * 
   *  Container's getter for Ref_SoCnfRef2livISTOPTView1
   */
  public Ref_SoCnfRef2livISTOPTViewImpl getRef_SoCnfRef2livISTOPTView1()
  {
    return (Ref_SoCnfRef2livISTOPTViewImpl)findViewObject("Ref_SoCnfRef2livISTOPTView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoStatsAggregazView2
   */
  public Stats_SoStatsAggregazViewImpl getStats_SoStatsAggregazView2()
  {
    return (Stats_SoStatsAggregazViewImpl)findViewObject("Stats_SoStatsAggregazView2");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef1livMXEST1View1
   */
  public Stats_SoCnfRef1livMXEST1ViewImpl getStats_SoCnfRef1livMXEST1View1()
  {
    return (Stats_SoCnfRef1livMXEST1ViewImpl)findViewObject("Stats_SoCnfRef1livMXEST1View1");
  }

  /**
   * 
   *  Container's getter for Stats_SoMedicoView1
   */
  public Round_SoMedicoViewImpl getStats_SoMedicoView1()
  {
    return (Round_SoMedicoViewImpl)findViewObject("Stats_SoMedicoView1");
  }

  /**
   * 
   *  Container's getter for Cnf_SoCnfCentroRefView1
   */
  public Cnf_SoCnfCentroRefViewImpl getCnf_SoCnfCentroRefView1()
  {
    return (Cnf_SoCnfCentroRefViewImpl)findViewObject("Cnf_SoCnfCentroRefView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef1livMXEST1View2
   */
  public Stats_SoCnfRef1livMXEST1ViewImpl getStats_SoCnfRef1livMXEST1View2()
  {
    return (Stats_SoCnfRef1livMXEST1ViewImpl)findViewObject("Stats_SoCnfRef1livMXEST1View2");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livMXEXECView1
   */
  public Stats_SoCnfRef2livMXEXECViewImpl getStats_SoCnfRef2livMXEXECView1()
  {
    return (Stats_SoCnfRef2livMXEXECViewImpl)findViewObject("Stats_SoCnfRef2livMXEXECView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livMXCESTView1
   */
  public Stats_SoCnfRef2livMXCESTViewImpl getStats_SoCnfRef2livMXCESTView1()
  {
    return (Stats_SoCnfRef2livMXCESTViewImpl)findViewObject("Stats_SoCnfRef2livMXCESTView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livMXAESTView1
   */
  public Stats_SoCnfRef2livMXAESTViewImpl getStats_SoCnfRef2livMXAESTView1()
  {
    return (Stats_SoCnfRef2livMXAESTViewImpl)findViewObject("Stats_SoCnfRef2livMXAESTView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfRef2livINTASCView1
   */
  public Stats_SoCnfRef2livINTASCViewImpl getStats_SoCnfRef2livINTASCView1()
  {
    return (Stats_SoCnfRef2livINTASCViewImpl)findViewObject("Stats_SoCnfRef2livINTASCView1");
  }

  /**
   * 
   *  Container's getter for Stats_SoCnfCategTpinvitoView2
   */
  public Stats_SoCnfCategTpinvitoViewImpl getStats_SoCnfCategTpinvitoView2()
  {
    return (Stats_SoCnfCategTpinvitoViewImpl)findViewObject("Stats_SoCnfCategTpinvitoView2");
  }

  /**
   * 
   *  Container's getter for Stat_SoCnfCodEsitoInvitoView1
   */
  public Stat_SoCnfCodEsitoInvitoViewImpl getStat_SoCnfCodEsitoInvitoView1()
  {
    return (Stat_SoCnfCodEsitoInvitoViewImpl)findViewObject("Stat_SoCnfCodEsitoInvitoView1");
  }

  /**
   * 
   *  Container's getter for Cnf_SoCnfTpinvitoView1
   */
  public Cnf_SoCnfTpinvitoViewImpl getCnf_SoCnfTpinvitoView1()
  {
    return (Cnf_SoCnfTpinvitoViewImpl)findViewObject("Cnf_SoCnfTpinvitoView1");
  }

  /**
   * 
   *  Container's getter for Cnf_SoAmbIstricView1
   */
  public Cnf_SoAmbIstricViewImpl getCnf_SoAmbIstricView1()
  {
    return (Cnf_SoAmbIstricViewImpl)findViewObject("Cnf_SoAmbIstricView1");
  }
}