package model.conf;

import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 28 11:37:10 CEST 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class Cnf_SoCnfClassePopImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Codclasse {
            public Object get(Cnf_SoCnfClassePopImpl obj) {
                return obj.getCodclasse();
            }

            public void put(Cnf_SoCnfClassePopImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Descrizione {
            public Object get(Cnf_SoCnfClassePopImpl obj) {
                return obj.getDescrizione();
            }

            public void put(Cnf_SoCnfClassePopImpl obj, Object value) {
                obj.setDescrizione((String) value);
            }
        }
        ,
        Tpscr {
            public Object get(Cnf_SoCnfClassePopImpl obj) {
                return obj.getTpscr();
            }

            public void put(Cnf_SoCnfClassePopImpl obj, Object value) {
                obj.setTpscr((String) value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(Cnf_SoCnfClassePopImpl object);

        public abstract void put(Cnf_SoCnfClassePopImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CODCLASSE = AttributesEnum.Codclasse.index();
    public static final int DESCRIZIONE = AttributesEnum.Descrizione.index();
    public static final int TPSCR = AttributesEnum.Tpscr.index();

    /**
     * This is the default constructor (do not remove).
     */
    public Cnf_SoCnfClassePopImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.conf.Cnf_SoCnfClassePop");
    }


    /**
     * Gets the attribute value for Codclasse, using the alias name Codclasse.
     * @return the value of Codclasse
     */
    public String getCodclasse() {
        return (String) getAttributeInternal(CODCLASSE);
    }


    /**
     * Gets the attribute value for Descrizione, using the alias name Descrizione.
     * @return the value of Descrizione
     */
    public String getDescrizione() {
        return (String) getAttributeInternal(DESCRIZIONE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Descrizione.
     * @param value value to set the Descrizione
     */
    public void setDescrizione(String value) {
        setAttributeInternal(DESCRIZIONE, value);
    }

    /**
     * Gets the attribute value for Tpscr, using the alias name Tpscr.
     * @return the value of Tpscr
     */
    public String getTpscr() {
        return (String) getAttributeInternal(TPSCR);
    }

    /**
     * Sets <code>value</code> as the attribute value for Tpscr.
     * @param value value to set the Tpscr
     */
    public void setTpscr(String value) {
        setAttributeInternal(TPSCR, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param codclasse key constituent
     * @param tpscr key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String codclasse, String tpscr) {
        return new Key(new Object[] { codclasse, tpscr });
    }


}

