package model.conf;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 15 09:34:02 CEST 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class Cnf_SoCnfInvitiFastImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id {
            public Object get(Cnf_SoCnfInvitiFastImpl obj) {
                return obj.getId();
            }

            public void put(Cnf_SoCnfInvitiFastImpl obj, Object value) {
                obj.setId((Number) value);
            }
        }
        ,
        NomeConf {
            public Object get(Cnf_SoCnfInvitiFastImpl obj) {
                return obj.getNomeConf();
            }

            public void put(Cnf_SoCnfInvitiFastImpl obj, Object value) {
                obj.setNomeConf((String) value);
            }
        }
        ,
        Ulss {
            public Object get(Cnf_SoCnfInvitiFastImpl obj) {
                return obj.getUlss();
            }

            public void put(Cnf_SoCnfInvitiFastImpl obj, Object value) {
                obj.setUlss((String) value);
            }
        }
        ,
        Tpscr {
            public Object get(Cnf_SoCnfInvitiFastImpl obj) {
                return obj.getTpscr();
            }

            public void put(Cnf_SoCnfInvitiFastImpl obj, Object value) {
                obj.setTpscr((String) value);
            }
        }
        ,
        Idtpinvito {
            public Object get(Cnf_SoCnfInvitiFastImpl obj) {
                return obj.getIdtpinvito();
            }

            public void put(Cnf_SoCnfInvitiFastImpl obj, Object value) {
                obj.setIdtpinvito((String) value);
            }
        }
        ,
        Idcentro {
            public Object get(Cnf_SoCnfInvitiFastImpl obj) {
                return obj.getIdcentro();
            }

            public void put(Cnf_SoCnfInvitiFastImpl obj, Object value) {
                obj.setIdcentro((Integer) value);
            }
        }
        ,
        DataCorrente {
            public Object get(Cnf_SoCnfInvitiFastImpl obj) {
                return obj.getDataCorrente();
            }

            public void put(Cnf_SoCnfInvitiFastImpl obj, Object value) {
                obj.setDataCorrente((Number) value);
            }
        }
        ,
        Data {
            public Object get(Cnf_SoCnfInvitiFastImpl obj) {
                return obj.getData();
            }

            public void put(Cnf_SoCnfInvitiFastImpl obj, Object value) {
                obj.setData((Date) value);
            }
        }
        ,
        Codesitoinvito {
            public Object get(Cnf_SoCnfInvitiFastImpl obj) {
                return obj.getCodesitoinvito();
            }

            public void put(Cnf_SoCnfInvitiFastImpl obj, Object value) {
                obj.setCodesitoinvito((String) value);
            }
        }
        ,
        StampaEtichetta {
            public Object get(Cnf_SoCnfInvitiFastImpl obj) {
                return obj.getStampaEtichetta();
            }

            public void put(Cnf_SoCnfInvitiFastImpl obj, Object value) {
                obj.setStampaEtichetta((Number) value);
            }
        }
        ,
        Note {
            public Object get(Cnf_SoCnfInvitiFastImpl obj) {
                return obj.getNote();
            }

            public void put(Cnf_SoCnfInvitiFastImpl obj, Object value) {
                obj.setNote((String) value);
            }
        }
        ,
        Dtins {
            public Object get(Cnf_SoCnfInvitiFastImpl obj) {
                return obj.getDtins();
            }

            public void put(Cnf_SoCnfInvitiFastImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Opins {
            public Object get(Cnf_SoCnfInvitiFastImpl obj) {
                return obj.getOpins();
            }

            public void put(Cnf_SoCnfInvitiFastImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Dtmod {
            public Object get(Cnf_SoCnfInvitiFastImpl obj) {
                return obj.getDtmod();
            }

            public void put(Cnf_SoCnfInvitiFastImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Utilizza {
            public Object get(Cnf_SoCnfInvitiFastImpl obj) {
                return obj.getUtilizza();
            }

            public void put(Cnf_SoCnfInvitiFastImpl obj, Object value) {
                obj.setUtilizza((Number) value);
            }
        }
        ,
        Ordine {
            public Object get(Cnf_SoCnfInvitiFastImpl obj) {
                return obj.getOrdine();
            }

            public void put(Cnf_SoCnfInvitiFastImpl obj, Object value) {
                obj.setOrdine((Number) value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(Cnf_SoCnfInvitiFastImpl object);

        public abstract void put(Cnf_SoCnfInvitiFastImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int NOMECONF = AttributesEnum.NomeConf.index();
    public static final int ULSS = AttributesEnum.Ulss.index();
    public static final int TPSCR = AttributesEnum.Tpscr.index();
    public static final int IDTPINVITO = AttributesEnum.Idtpinvito.index();
    public static final int IDCENTRO = AttributesEnum.Idcentro.index();
    public static final int DATACORRENTE = AttributesEnum.DataCorrente.index();
    public static final int DATA = AttributesEnum.Data.index();
    public static final int CODESITOINVITO = AttributesEnum.Codesitoinvito.index();
    public static final int STAMPAETICHETTA = AttributesEnum.StampaEtichetta.index();
    public static final int NOTE = AttributesEnum.Note.index();
    public static final int DTINS = AttributesEnum.Dtins.index();
    public static final int OPINS = AttributesEnum.Opins.index();
    public static final int DTMOD = AttributesEnum.Dtmod.index();
    public static final int UTILIZZA = AttributesEnum.Utilizza.index();
    public static final int ORDINE = AttributesEnum.Ordine.index();

    /**
     * This is the default constructor (do not remove).
     */
    public Cnf_SoCnfInvitiFastImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.conf.Cnf_SoCnfInvitiFast");
    }


    @Override
    protected Object getHistoryContextForAttribute(AttributeDefImpl attr) {
        //if(this.getId()==null){
        //    SequenceImpl s = new SequenceImpl("SO_INVITI_FAST_SEQ", getDBTransaction());
        //    this.setId(s.getSequenceNumber());
       // }
        
        byte historyKind = attr.getHistoryKind();

        if ((historyKind == AttributeDefImpl.HISTORY_CREATE_USER) || (historyKind == AttributeDefImpl.HISTORY_MODIFY_USER)) {
                return ADFContext.getCurrent().getSessionScope().get("user");
        }
        
        return super.getHistoryContextForAttribute(attr);
    }
    
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == this.DML_INSERT) { //inserisco il codice da sequenza
            SequenceImpl s = new SequenceImpl("SO_INVITI_FAST_SEQ", getDBTransaction());
            this.setId(s.getSequenceNumber());
        }
        
        if (this.getDataCorrente()!=null && this.getDataCorrente().intValue()==1)
            this.setData(null);
        
        super.doDML(operation, e);
    }
    
    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public Number getId() {
        return (Number) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Number value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for NomeConf, using the alias name NomeConf.
     * @return the value of NomeConf
     */
    public String getNomeConf() {
        return (String) getAttributeInternal(NOMECONF);
    }

    /**
     * Sets <code>value</code> as the attribute value for NomeConf.
     * @param value value to set the NomeConf
     */
    public void setNomeConf(String value) {
        setAttributeInternal(NOMECONF, value);
    }

    /**
     * Gets the attribute value for Ulss, using the alias name Ulss.
     * @return the value of Ulss
     */
    public String getUlss() {
        return (String) getAttributeInternal(ULSS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Ulss.
     * @param value value to set the Ulss
     */
    public void setUlss(String value) {
        setAttributeInternal(ULSS, value);
    }

    /**
     * Gets the attribute value for Tpscr, using the alias name Tpscr.
     * @return the value of Tpscr
     */
    public String getTpscr() {
        return (String) getAttributeInternal(TPSCR);
    }

    /**
     * Sets <code>value</code> as the attribute value for Tpscr.
     * @param value value to set the Tpscr
     */
    public void setTpscr(String value) {
        setAttributeInternal(TPSCR, value);
    }

    /**
     * Gets the attribute value for Idtpinvito, using the alias name Idtpinvito.
     * @return the value of Idtpinvito
     */
    public String getIdtpinvito() {
        return (String) getAttributeInternal(IDTPINVITO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idtpinvito.
     * @param value value to set the Idtpinvito
     */
    public void setIdtpinvito(String value) {
        setAttributeInternal(IDTPINVITO, value);
    }

    /**
     * Gets the attribute value for Idcentro, using the alias name Idcentro.
     * @return the value of Idcentro
     */
    public Integer getIdcentro() {
        return (Integer) getAttributeInternal(IDCENTRO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idcentro.
     * @param value value to set the Idcentro
     */
    public void setIdcentro(Integer value) {
        setAttributeInternal(IDCENTRO, value);
    }

    /**
     * Gets the attribute value for DataCorrente, using the alias name DataCorrente.
     * @return the value of DataCorrente
     */
    public Number getDataCorrente() {
        return (Number) getAttributeInternal(DATACORRENTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DataCorrente.
     * @param value value to set the DataCorrente
     */
    public void setDataCorrente(Number value) {
        setAttributeInternal(DATACORRENTE, value);
    }

    /**
     * Gets the attribute value for Data, using the alias name Data.
     * @return the value of Data
     */
    public Date getData() {
        return (Date) getAttributeInternal(DATA);
    }

    /**
     * Sets <code>value</code> as the attribute value for Data.
     * @param value value to set the Data
     */
    public void setData(Date value) {
        setAttributeInternal(DATA, value);
    }

    /**
     * Gets the attribute value for Codesitoinvito, using the alias name Codesitoinvito.
     * @return the value of Codesitoinvito
     */
    public String getCodesitoinvito() {
        return (String) getAttributeInternal(CODESITOINVITO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Codesitoinvito.
     * @param value value to set the Codesitoinvito
     */
    public void setCodesitoinvito(String value) {
        setAttributeInternal(CODESITOINVITO, value);
    }

    /**
     * Gets the attribute value for StampaEtichetta, using the alias name StampaEtichetta.
     * @return the value of StampaEtichetta
     */
    public Number getStampaEtichetta() {
        return (Number) getAttributeInternal(STAMPAETICHETTA);
    }

    /**
     * Sets <code>value</code> as the attribute value for StampaEtichetta.
     * @param value value to set the StampaEtichetta
     */
    public void setStampaEtichetta(Number value) {
        setAttributeInternal(STAMPAETICHETTA, value);
    }

    /**
     * Gets the attribute value for Note, using the alias name Note.
     * @return the value of Note
     */
    public String getNote() {
        return (String) getAttributeInternal(NOTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Note.
     * @param value value to set the Note
     */
    public void setNote(String value) {
        setAttributeInternal(NOTE, value);
    }

    /**
     * Gets the attribute value for Dtins, using the alias name Dtins.
     * @return the value of Dtins
     */
    public Date getDtins() {
        return (Date) getAttributeInternal(DTINS);
    }


    /**
     * Gets the attribute value for Opins, using the alias name Opins.
     * @return the value of Opins
     */
    public String getOpins() {
        return (String) getAttributeInternal(OPINS);
    }


    /**
     * Gets the attribute value for Dtmod, using the alias name Dtmod.
     * @return the value of Dtmod
     */
    public Date getDtmod() {
        return (Date) getAttributeInternal(DTMOD);
    }


    /**
     * Gets the attribute value for Utilizza, using the alias name Utilizza.
     * @return the value of Utilizza
     */
    public Number getUtilizza() {
        return (Number) getAttributeInternal(UTILIZZA);
    }

    /**
     * Sets <code>value</code> as the attribute value for Utilizza.
     * @param value value to set the Utilizza
     */
    public void setUtilizza(Number value) {
        setAttributeInternal(UTILIZZA, value);
    }

    /**
     * Gets the attribute value for Ordine, using the alias name Ordine.
     * @return the value of Ordine
     */
    public Number getOrdine() {
        return (Number) getAttributeInternal(ORDINE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Ordine.
     * @param value value to set the Ordine
     */
    public void setOrdine(Number value) {
        setAttributeInternal(ORDINE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[] { id });
    }


}

