package model;

import insiel.dataHandling.DateUtils;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.util.HashMap;

import model.common.ImpExp_AppModule;
import model.common.Impexp_SoLogImpexpViewRow;

import model.commons.AccessManager;
import model.commons.ConfigurationConstants;
import model.commons.ConfigurationReader;
import model.commons.Parent_AppModuleImpl;
import model.commons.ViewHelper;

import model.conf.Cnf_SoCnfSugg1livRegionaleViewImpl;
import model.conf.Cnf_SoCnfSugg2livRegionaleViewImpl;
import model.conf.Cnf_SoCnfSugg3livRegionaleViewImpl;
import model.conf.Cnf_SoCnfTpinvitoRegionaleViewImpl;
import model.conf.Cnf_SoCnfTpscrViewImpl;

import model.impexp.ImpExp_DatiQuestPFViewImpl;
import model.impexp.ImpExp_SoAziendaViewImpl;
import model.impexp.Impexp_CodaProcessiViewImpl;
import model.impexp.Impexp_SdospsDaextViewImpl;
import model.impexp.Impexp_SdospsUlssErogViewImpl;
import model.impexp.Impexp_Sdosps_ElencoFlussiViewImpl;
import model.impexp.Impexp_SoCentroPrelViewImpl;
import model.impexp.Impexp_SoCnfCentriImpexpViewImpl;
import model.impexp.Impexp_SoCnfImpExpLogViewImpl;
import model.impexp.Impexp_SoCnfImpexpTpdipViewImpl;
import model.impexp.Impexp_SoCnfImpexpViewImpl;
import model.impexp.Impexp_SoCnfSpsPrestazioniViewImpl;
import model.impexp.Impexp_SoCnfTpdipartimentaleViewImpl;
import model.impexp.Impexp_SoCodaProcessiViewImpl;
import model.impexp.Impexp_SoImpexpRefertiViewImpl;
import model.impexp.Impexp_SoImportRefertiCOViewImpl;
import model.impexp.Impexp_SoImportRefertiHPVViewImpl;
import model.impexp.Impexp_SoImportRefertiMAViewImpl;
import model.impexp.Impexp_SoImportRefertiViewImpl;
import model.impexp.Impexp_SoLogImpexpViewImpl;
import model.impexp.Impexp_SoLogTransferViewImpl;
import model.impexp.Impexp_SoStPoptargetAnagViewImpl;
import model.impexp.Impexp_SoStPoptargetImpl;
import model.impexp.Impexp_TUEndoscopieViewImpl;
import model.impexp.Impexp_TUEsclusioniViewImpl;
import model.impexp.Impexp_TUInterventiCIViewImpl;
import model.impexp.Impexp_TUInterventiCOViewImpl;
import model.impexp.Impexp_TUInterventiMAViewImpl;
import model.impexp.Impexp_TUInvitiCitoViewImpl;
import model.impexp.Impexp_TUInvitiColonViewImpl;
import model.impexp.Impexp_TUInvitiMammoViewImpl;
import model.impexp.Impexp_TUReferti1livCIViewImpl;
import model.impexp.Impexp_TUReferti1livCOViewImpl;
import model.impexp.Impexp_TUReferti1livMAViewImpl;
import model.impexp.Impexp_TUReferti2livCIViewImpl;
import model.impexp.Impexp_TUReferti2livCOViewImpl;
import model.impexp.Impexp_TUReferti2livMAViewImpl;
import model.impexp.Impexp_TUSoggettoViewImpl;

import model.referto.Ref_SoRefertocito1livViewImpl;
import model.referto.Ref_SoRefertocito2livViewImpl;
import model.referto.Ref_SoRefertocolon1livViewImpl;
import model.referto.Ref_SoRefertocolon2livViewImpl;
import model.referto.Ref_SoRefertomammo1livViewImpl;
import model.referto.Ref_SoRefertomammo2livViewImpl;

import model.referto.Ref_SoRefertopfasViewImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;


//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---    Warning: Do not modify method signatures of generated methods.
//  ---------------------------------------------------------------------

public class ImpExp_AppModuleImpl extends Parent_AppModuleImpl implements ImpExp_AppModule {
	private static ADFLogger logger = ADFLogger.createADFLogger(ImpExp_AppModuleImpl.class);
	
	/**
	 *
	 *  This is the default constructor (do not remove)
	 */
	public ImpExp_AppModuleImpl() {
	}

	/**
	 *
	 *  Container's getter for ImpExp_SoAziendaView1
	 */
	public ImpExp_SoAziendaViewImpl getImpExp_SoAziendaView1() {
		return (ImpExp_SoAziendaViewImpl)findViewObject("ImpExp_SoAziendaView1");
	}

	/**
	 *
	 *  Sample main for debugging Business Components code using the tester.
	 */
	public static void main(String[] args) {
		launchTester("model", "ImpExp_AppModuleLocal");
	}
        
	public void filterConfiguration(String ulss, String scr, boolean regionale) {

		String where2 = null;
		if (!regionale) {
			where2 = "ULSS='" + ulss + "'";
		}

		//configurazione delle aziende sanitarie:
		//l'utente vede solo la sua (sempre, anche per i regionali)
		ViewObject vo = this.getImpExp_SoAziendaView1();
		vo.setWhereClause("CODAZ='" + ulss + "'");
		vo.executeQuery();

		//storicizzazione popolazione
		vo = this.getImpexp_SoStPoptarget1();
		vo.setWhereClause("CODAZ='" + ulss + "' AND TPSCR='" + scr + "'");
		vo.executeQuery();


		vo = this.getImpexp_SoLogTransferView1();
		vo.setWhereClause("1=2");
		vo.executeQuery();


	}

	/**
	 *
	 *  Container's getter for Impexp_SoCnfImpexpView1
	 */
	public Impexp_SoCnfImpexpViewImpl getImpexp_SoCnfImpexpView1() {
		return (Impexp_SoCnfImpexpViewImpl)findViewObject("Impexp_SoCnfImpexpView1");
	}


	public String callImportEsclusioni(String ulss, String tpscr, String tipoFlusso, String eroganti, String user,
                                       String modalita, int anno, int fase)

        {
        //10102011 Gaion - JOURNALING
        //lettura parametro di abilitazione per il journaling
        String flagAbilJournal = ConfigurationReader.readProperty("flagAbilJournal");
        if (flagAbilJournal != null && flagAbilJournal.equals("1")) {
            this.preapareJournaling(user, ulss, tpscr);
        }
        //10102011 fine

        CallableStatement st = null;

        try {
            //Thread.sleep(30000);

            String stmt = "BEGIN  CARICA_ESCLUSIONI.inserisci_esclusioni(?,?,?,?,?,?,?,?,?,?); END;";

            DBTransaction tr = this.getDBTransaction();
            st = tr.createCallableStatement(stmt, 1);
            if (ulss == null)
                throw new Exception("Azienda sanitaria non indicata");
            st.setString(1, ulss); // passaggio del parametro: controllare prima che sia diverso da null
            if (tpscr == null)
                throw new Exception("Tipo screening non indicato");
            st.setString(2, tpscr); // passaggio del parametro: controllare prima che sia diverso da null
            if (tipoFlusso == null)
                throw new Exception("Tipo flusso non indicato");
            st.setString(3, tipoFlusso); // passaggio del parametro: controllare prima che sia diverso da null
            if (eroganti == null)
                throw new Exception("Ulss eroganti non indicate");
            st.setString(4, eroganti); // passaggio del parametro: controllare prima che sia diverso da null
            if (user == null)
                throw new Exception("Utente non indicato");
            st.setString(5, user); // passaggio del parametro: controllare prima che sia diverso da null
            if (modalita == null)
                throw new Exception("Modalità non indicata");
            st.setString(6, modalita); // passaggio del parametro: controllare prima che sia diverso da null
            st.setInt(7, anno);
            st.setInt(8, fase);
            st.registerOutParameter(9, java.sql.Types.VARCHAR);
            st.registerOutParameter(10, java.sql.Types.NUMERIC);
            st.executeUpdate();


            // se si vuole mandare un messaggio
            String mess = st.getString(9);
            int num = (st.getBigDecimal(10)).intValue();
            if (num != 0)
                return mess;
            else
                return null;

        } catch (Exception e) {
            e.printStackTrace();
            return e.getMessage();
        }

        finally {
            try {
                if (st != null)
                    st.close();
            } catch (SQLException s) { /* ignore */
            }

        }
    }


	public String callImportAnagrafe(String ulss, Integer modalita) {
		//10102011 Gaion - JOURNALING
		//lettura parametro di abilitazione per il journaling
		String flagAbilJournal = ConfigurationReader.readProperty("flagAbilJournal");
		if (flagAbilJournal != null && flagAbilJournal.equals("1")) {
			this.preapareJournaling("CARICA_ANAGRAFE", ulss, null);
		}
		//10102011 fine

		CallableStatement st = null;

		try {
			String stmt = "";
			//04/08/2011 sara - integrazione an regionale
			//modalita PDD = 3
			//modalita FTP = 1
			if (modalita != null && ConfigurationConstants.MODALITA_PDD.equals(modalita)) {
				stmt = "BEGIN  CARICA_ANAGRAFE_HL7.inserimento_anagrafe(?,?,?); END;";
			} else {
				stmt = "BEGIN  CARICA_ANAGRAFE.inserimento_anagrafe(?,?,?); END;";
			}
			//fine 04/08/2011 sara

			DBTransaction tr = this.getDBTransaction();
			st = tr.createCallableStatement(stmt, 1);
			if (ulss == null)
				throw new Exception("Nessuna azienda sanitaria indicata");
			st.setString(1, ulss); // passaggio del parametro: controllare prima che sia diverso da null
			st.registerOutParameter(2, java.sql.Types.VARCHAR);
			st.registerOutParameter(3, java.sql.Types.NUMERIC);
			st.executeUpdate();


			// se si vuole mandare un messaggio
			String mess = st.getString(2);
			int num = (st.getBigDecimal(3)).intValue();
			if (num != 0)
				return mess;
			else
				return null;

		} catch (Exception e) {
			e.printStackTrace();
			return e.getMessage();
		}

		finally {
			try {
				if (st != null)
					st.close();
			} catch (SQLException s) {
			    logger.severe(s);
			}
		}
	}
        
    public String callImportAnagrafeSingola(String ulss, BigDecimal chiaveMsg) {
            //10102011 Gaion - JOURNALING
            //lettura parametro di abilitazione per il journaling
            String flagAbilJournal = ConfigurationReader.readProperty("flagAbilJournal");
            if (flagAbilJournal != null && flagAbilJournal.equals("1")) {
                    this.preapareJournaling("CARICA_ANAGRAFE", ulss, null);
            }
            //10102011 fine

            CallableStatement st = null;

            try {
                    String stmt =  "BEGIN  CARICA_ANAGRAFE_HL7.aggiorna_anagrafe_singola(?,?,?,?); END;";

                    DBTransaction tr = this.getDBTransaction();
                    st = tr.createCallableStatement(stmt, 1);
                    if (ulss == null)
                            throw new Exception("Nessuna azienda sanitaria indicata");
                    st.setString(1, ulss); // passaggio del parametro: controllare prima che sia diverso da null
                    st.setBigDecimal(2, chiaveMsg); // passaggio del parametro: controllare prima che sia diverso da null
                    st.registerOutParameter(3, java.sql.Types.VARCHAR);
                    st.registerOutParameter(4, java.sql.Types.NUMERIC);
                    st.executeUpdate();


                    // se si vuole mandare un messaggio
                    String mess = st.getString(3);
                    int num = (st.getBigDecimal(4)).intValue();
                    if (num != 0)
                            return mess;
                    else
                            return null;

            } catch (Exception e) {
                    e.printStackTrace();
                    return e.getMessage();
            }

            finally {
                    try {
                            if (st != null)
                                    st.close();
                    } catch (SQLException s) {
                        logger.severe(s);
                    }
            }
    }

	/**
	 *
	 *  Container's getter for Impexp_SoCnfCentriImpexpView1
	 */
	public Impexp_SoCnfCentriImpexpViewImpl getImpexp_SoCnfCentriImpexpView1() {
		return (Impexp_SoCnfCentriImpexpViewImpl)findViewObject("Impexp_SoCnfCentriImpexpView1");
	}

	public String callImportPresenze(String ulss, String tpscr, BigDecimal centro, String tpdip, Integer[] rc) {

		// Lettura parametro di abilitazione per il journaling
		String flagAbilJournal = ConfigurationReader.readProperty("flagAbilJournal");
		if (flagAbilJournal != null && flagAbilJournal.equals("1")) {
			this.preapareJournaling("CARICA_PRESENZE", ulss, tpscr);
		}

		CallableStatement st = null;

		try {
			if (ulss == null)
				throw new Exception("Nessuna azienda sanitaria indicata");

			String stmt = null;
			DBTransaction tr = tr = this.getDBTransaction();

			if (ConfigurationConstants.TPDIP_ACCETTAZIONE.equals(tpdip)) {
				stmt = "BEGIN CARICA_PRESENZE.inserimento_presenze(?,?,?,?,?); END;";

				st = tr.createCallableStatement(stmt, 1);
				st.setBigDecimal(1, centro);
				st.setString(2, ulss);
				st.setString(3, tpscr);
				st.registerOutParameter(4, java.sql.Types.VARCHAR);
				st.registerOutParameter(5, java.sql.Types.NUMERIC);
				st.executeUpdate();

				// Se si vuole mandare un messaggio
				String mess = st.getString(4);
				int num = (st.getBigDecimal(5)).intValue();
				if (num != 0) {
					rc[0] = new Integer(num);
					return mess;
				} else
					return null;
			} else {
				throw new Exception("Import non previsto per il dipartimentale " + tpdip);
			}
		} catch (Exception e) {
			e.printStackTrace();
			return e.getMessage();
		} finally {
			try {
				if (st != null)
					st.close();
			} catch (SQLException s) {
			    logger.severe(s);
			}
		}
	}

	public String callImportReferti(String ulss, String tpscr, BigDecimal centro, String tpdip, Integer[] rc)
	{
		//10102011 Gaion - JOURNALING
		//lettura parametro di abilitazione per il journaling
		String flagAbilJournal = ConfigurationReader.readProperty("flagAbilJournal");
		if (flagAbilJournal != null && flagAbilJournal.equals("1")) {
			this.preapareJournaling("CARICA_REFERTI", ulss, tpscr);
		}
		//10102011 fine

		CallableStatement st = null;

		try {

			if (ulss == null)
				throw new Exception("Nessuna azienda sanitaria indicata");


			String stmt = null;
			DBTransaction tr = tr = this.getDBTransaction();

			if ("CI".equals(tpscr)) {
				//import pap test da anatomia patologica
				if (ConfigurationConstants.TPDIP_ANAPAT.equals(tpdip))
					stmt = "BEGIN  CARICA_REFERTI.inserimento_referti(?,?,?,?,?); END;";
				else if (ConfigurationConstants.TPDIP_LAB.equals(tpdip))
					stmt = "BEGIN  CARICA_REFERTI_HPV.inserimento_referti(?,?,?,?,?); END;";
				else
					throw new Exception("nessun import previsto dal dipartimentale indicato");


				st = tr.createCallableStatement(stmt, 1);


				st.setBigDecimal(1, centro);
				st.setString(2, ulss);
				st.setString(3, tpscr);
				st.registerOutParameter(4, java.sql.Types.VARCHAR);
				st.registerOutParameter(5, java.sql.Types.NUMERIC);
				st.executeUpdate();

				// se si vuole mandare un messaggio
				String mess = st.getString(4);
				int num = (st.getBigDecimal(5)).intValue();
				if (num != 0) {
					rc[0] = new Integer(num);
					return mess;
				} else
					return null;
				/* }
        else if(ConfigurationConstants.TPDIP_LAB.equals(tpdip)){
          stmt="BEGIN  CARICA_REFERTI_HPV.inserimento_referti(?,?,?,?,?); END;";


          st = tr.createCallableStatement(stmt,1);


          st.setBigDecimal(1,centro);		
          st.setString(2,ulss);
          st.setString(3,tpscr);
          st.registerOutParameter(4, java.sql.Types.VARCHAR);
          st.registerOutParameter(5, java.sql.Types.NUMERIC);
          st.executeUpdate();

          // se si vuole mandare un messaggio
          String mess=st.getString(4);
          int num = (st.getBigDecimal(5)).intValue();
          if(num != 0)
            return mess;
          else
            return null;
        }        else
        {
          throw new Exception("nessun import previsto dal dipartimentale indicato");
        }*/


			} else if ("CO".equals(tpscr)) {

				if (!ConfigurationConstants.TPDIP_LAB.equals(tpdip))
					throw new Exception("Import non previsto per il dipartimentale " + tpdip);
				/*inserimento_referti_colon(p_tpscr IN char, p_ulss IN char,
     * message IN OUT varchar2, rval IN OUT number)*/
				stmt = "BEGIN  CARICA_REFERTI_COLON.inserimento_referti_colon(?,?,?,?); END;";


				st = tr.createCallableStatement(stmt, 1);
				st.setString(1, tpscr);
				st.setString(2, ulss);
				st.registerOutParameter(3, java.sql.Types.VARCHAR);
				st.registerOutParameter(4, java.sql.Types.NUMERIC);
				st.executeUpdate();


				// se si vuole mandare un messaggio
				String mess = st.getString(3);
				int num = (st.getBigDecimal(4)).intValue();
				if (num != 0) {
					rc[0] = new Integer(num);
					return mess;
				} else
					return null;
			} else if ("MA".equals(tpscr)) {

				if (ConfigurationConstants.TPDIP_RADIO.equals(tpdip)) {
					stmt = "BEGIN  CARICA_REFERTI_MAMMO.inserimento_referti(?,?,?,?,?); END;";

					st = tr.createCallableStatement(stmt, 1);
					st.setBigDecimal(1, centro);
					st.setString(2, ulss);
					st.setString(3, tpscr);
					st.registerOutParameter(4, java.sql.Types.VARCHAR);
					st.registerOutParameter(5, java.sql.Types.NUMERIC);
					st.executeUpdate();


					// se si vuole mandare un messaggio
					String mess = st.getString(4);
					int num = (st.getBigDecimal(5)).intValue();
					if (num != 0) {
						rc[0] = new Integer(num);
						return mess;
					} else
						return null;
				}
				// 190122012 S.Gaion: chiamata al nuovo package per referti di 2 livello
				else if (ConfigurationConstants.TPDIP_RADIO2.equals(tpdip) || ConfigurationConstants.TPDIP_ANAPAT2.equals(tpdip)) {
					stmt = "BEGIN  CARICA_REFERTI_MAMMO2.inserimento_referti(?,?,?,?,?,?); END;";

					st = tr.createCallableStatement(stmt, 1);
					st.setBigDecimal(1, centro);
					st.setString(2, ulss);
					st.setString(3, tpscr);
					st.setString(4, tpdip);
					st.registerOutParameter(5, java.sql.Types.VARCHAR);
					st.registerOutParameter(6, java.sql.Types.NUMERIC);
					st.executeUpdate();

					// se si vuole mandare un messaggio
					String mess = st.getString(5);
					int num = (st.getBigDecimal(6)).intValue();
					if (num != 0) {
						rc[0] = new Integer(num);
						return mess;
					} else
						return null;
				} else
					throw new Exception("Import non previsto per il dipartimentale " + tpdip);
			} else
				throw new Exception("Tipo di screening " + tpscr + " non riconosciuto");


		} catch (Exception e) {
		    //ticket H00175977, milena Serra, 16/10/2019
                        rc[0]= new Integer(-1);
			e.printStackTrace();
			return e.getMessage();
		}

		finally {
			try {
				if (st != null)
					st.close();
			} catch (SQLException s) {
			    logger.severe(s);
			}

		}
	}

	/**
	 * Chiama la procedura ch eprende il file unico dei referti del colon e lo spacchetta
	 * nella configurazione tabellare interna
	 * @return
	 * @param tpscr
	 * @param ulss
	 */
	public String callUnpackReferti(String ulss, String tpscr)

	{
		//10102011 Gaion - JOURNALING
		//lettura parametro di abilitazione per il journaling
		String flagAbilJournal = ConfigurationReader.readProperty("flagAbilJournal");
		if (flagAbilJournal != null && flagAbilJournal.equals("1")) {
			this.preapareJournaling("CARICA_REFERTI_COLON", ulss, tpscr);
		}
		//10102011 fine

		CallableStatement st = null;

		try {
			String stmt = "BEGIN  CARICA_REFERTI_COLON.tab_tracciato_referti_colon(?,?,?,?); END;";

			DBTransaction tr = this.getDBTransaction();
			st = tr.createCallableStatement(stmt, 1);

			if (ulss == null)
				throw new Exception("Nessuna azienda sanitaria indicata");
			st.setString(1, tpscr);
			st.setString(2, ulss);
			st.registerOutParameter(3, java.sql.Types.VARCHAR);
			st.registerOutParameter(4, java.sql.Types.NUMERIC);
			st.executeUpdate();


			// se si vuole mandare un messaggio
			String mess = st.getString(3);
			int num = (st.getBigDecimal(4)).intValue();
			if (num != 0)
				return mess;
			else
				return null;

		} catch (Exception e) {
			e.printStackTrace();
			return e.getMessage();
		}

		finally {
			try {
				if (st != null)
					st.close();
			} catch (SQLException s) {
			    logger.severe(s);
			}

		}
	}


	/* public String callTracciatoUnico(String ulss,String tpscr,String periodo,
  String data_dal, String data_al)
  {
    CallableStatement st = null;

    try
    {
      String stmt = "BEGIN  CREA_FILE_TU.crea_file(?,?,?,?,?,?,?); END;";

      DBTransaction tr = this.getDBTransaction();
      st = tr.createCallableStatement(stmt,1);

      if(ulss==null)
        throw new Exception("Nessuna azienda sanitaria indicata");	
      st.setString(1,ulss);
      st.setString(2,periodo);
      st.setString(3,data_dal);
      st.setString(4,data_al);
      st.setString(5,tpscr);
      st.registerOutParameter(6, java.sql.Types.VARCHAR);
      st.registerOutParameter(7, java.sql.Types.NUMERIC);
      st.executeUpdate();


// se si vuole mandare un messaggio
      String mess=st.getString(6);
      BigDecimal retval=st.getBigDecimal(7);
      int num = retval==null?0:retval.intValue();
      if(num != 0)
        return mess;
      else
        return null;

      } catch(Exception e) {
          e.printStackTrace();
          return e.getMessage();
        }

    finally
    {
      try
      {
        if (st != null) st.close();
      }
      catch (SQLException s) {}

    }
  }

    public String callTUSospesi(String ulss,String tpscr,String periodo,
  String data_dal, String data_al, String nomefile)
  {
    CallableStatement st = null;

    try
    {
      String stmt = "BEGIN  CREA_FILE_TU.crea_file_da_sospesi(?,?,?,?,?,?,?,?);END;";

      DBTransaction tr = this.getDBTransaction();
      st = tr.createCallableStatement(stmt,1);

      if(ulss==null)
        throw new Exception("Nessuna azienda sanitaria indicata");	
      st.setString(1,ulss);
      st.setString(2,periodo);
      st.setString(3,data_dal);
      st.setString(4,data_al);
      st.setString(5,tpscr);
      st.setString(6,nomefile);
      st.registerOutParameter(7, java.sql.Types.VARCHAR);
      st.registerOutParameter(8, java.sql.Types.NUMERIC);
      st.executeUpdate();


// se si vuole mandare un messaggio
      String mess=st.getString(7);
      BigDecimal retval=st.getBigDecimal(8);
      int num = retval==null?0:retval.intValue();
      if(num != 0)
        return mess;
      else
        return null;

      } catch(Exception e) {
          e.printStackTrace();
          return e.getMessage();
        }

    finally
    {
      try
      {
        if (st != null) st.close();
      }
      catch (SQLException s) { }

    }
  }
  */

	public HashMap callTUwriteAnagrafeInFascia(String ulss, String tpscr, String data, String filename, String delimiter, String format) {
		CallableStatement st = null;
		HashMap map = new HashMap();
		try {
			String stmt = "BEGIN  tracciato_unico.write_anagrafe_in_fascia(?,?,?,?,?,?,?,?,?,?); END;";
			/*tracciato_unico.WRITE_ANAGRAFE_IN_FASCIA
   (this_tpscr in char, this_ulss in char,ulss_regionale in char,
   IL in varchar, FILENAME VARCHAR,
   delimiter in char,export_format in char,
   message IN OUT varchar2, esaminati IN OUT number,rval IN OUT number;*/
			DBTransaction tr = this.getDBTransaction();
			st = tr.createCallableStatement(stmt, 1);

			if (ulss == null)
				throw new Exception("Nessuna azienda sanitaria indicata");
			st.setString("this_tpscr", tpscr);
			st.setString("this_ulss", ulss);
			st.setString("ulss_regionale", AccessManager.CODREGIONALE);
			st.setString("il", data);
			st.setString("FILENAME", filename);
			st.setString("delimiter", delimiter);
			st.setString("export_format", format);


			st.registerOutParameter("message", java.sql.Types.VARCHAR);
			st.registerOutParameter("esaminati", java.sql.Types.NUMERIC);
			st.registerOutParameter("rval", java.sql.Types.NUMERIC);
			st.executeUpdate();


			// se si vuole mandare un messaggio
			String mess = st.getString("message");
			BigDecimal retval = st.getBigDecimal("rval");

			int num = retval == null ? 0 : retval.intValue();
			if (num != 0)
				map.put("error", mess);

			map.put("howmany", st.getBigDecimal("esaminati"));
			return map;

		} catch (Exception e) {
			e.printStackTrace();
			map.put("error", e.getMessage());
			return map;
		}

		finally {
			try {
				if (st != null)
					st.close();
			} catch (SQLException s) {
			    logger.severe(s);
			}


		}
	}

	public HashMap callTUwriteAnagrafeTU(String ulss, String tpscr, String data_dal, String data_al, String filename, String delimiter, String format) {
		CallableStatement st = null;
		HashMap map = new HashMap();
		try {
			String stmt = "BEGIN  tracciato_unico.write_anagrafe_tu(?,?,?,?,?,?,?,?,?,?,?); END;";
			/*tracciato_unico.write_anagrafe_tu('CI','050113','050000','01/01/2005','31/01/2005',
 * 'provaanagrafica.csv',';','yyyyMMgg',message,esaminati,rval);*/
			DBTransaction tr = this.getDBTransaction();
			st = tr.createCallableStatement(stmt, 1);

			if (ulss == null)
				throw new Exception("Nessuna azienda sanitaria indicata");
			st.setString("this_tpscr", tpscr);
			st.setString("this_ulss", ulss);
			st.setString("ulss_regionale", AccessManager.CODREGIONALE);
			st.setString("dal", data_dal);
			st.setString("al", data_al);
			st.setString("FILENAME", filename);
			st.setString("delimiter", delimiter);
			st.setString("export_format", format);


			st.registerOutParameter("message", java.sql.Types.VARCHAR);
			st.registerOutParameter("esaminati", java.sql.Types.NUMERIC);
			st.registerOutParameter("rval", java.sql.Types.NUMERIC);
			st.executeUpdate();


			// se si vuole mandare un messaggio
			String mess = st.getString("message");
			BigDecimal retval = st.getBigDecimal("rval");

			int num = retval == null ? 0 : retval.intValue();
			if (num != 0)
				map.put("error", mess);

			map.put("howmany", st.getBigDecimal("esaminati"));
			return map;

		} catch (Exception e) {
			e.printStackTrace();
			map.put("error", e.getMessage());
			return map;
		}

		finally {
			try {
				if (st != null)
					st.close();
			} catch (SQLException s) {
			    logger.severe(s);
			}


		}
	}

	public HashMap callTUwriteInviti(String ulss, String tpscr, String data_dal, String data_al, String inviti_filename, String anam_filename, String anam_extra_filename, String ref1_filename,
									 String ref1_extra_filename, String ref2_filename, String ref2_extra_filename, String int_filename, String int_extra_filename, String endo_filename, String delimiter,
									 String format) {
		CallableStatement st = null;
		HashMap map = new HashMap();
		try {


			String stmt = "BEGIN  tracciato_unico.WRITE_INVITIREF_TU(?,?,?,?,?,?,?,?,?,?," + "?,?,?,?,?,?,?,?,?,?); END;";

			DBTransaction tr = this.getDBTransaction();
			st = tr.createCallableStatement(stmt, 1);

			if (ulss == null)
				throw new Exception("Nessuna azienda sanitaria indicata");
			st.setString("this_tpscr", tpscr);
			st.setString("this_ulss", ulss);
			st.setString("ulss_regionale", AccessManager.CODREGIONALE);
			st.setString("dal", data_dal);
			st.setString("al", data_al);
			st.setString("INVITI_FILENAME", inviti_filename);
			st.setString("ANAM_FILENAME", anam_filename);
			st.setString("SUB_ANAM_FILENAME", anam_extra_filename);
			st.setString("REF1_FILENAME", ref1_filename);
			st.setString("REF1_EXTRA_FILENAME", ref1_extra_filename);
			st.setString("REF2_FILENAME", ref2_filename);
			st.setString("REF2_EXTRA_FILENAME", ref2_extra_filename);
			st.setString("INT_FILENAME", int_filename);
			st.setString("INT_EXTRA_FILENAME", int_extra_filename);
			st.setString("ENDO_FILENAME", endo_filename);
			st.setString("delimiter", delimiter);
			st.setString("export_format", format);


			st.registerOutParameter("message", java.sql.Types.VARCHAR);
			st.registerOutParameter("esaminati", java.sql.Types.NUMERIC);
			st.registerOutParameter("rval", java.sql.Types.NUMERIC);

			st.executeUpdate();


			// se si vuole mandare un messaggio
			String mess = st.getString("message");
			BigDecimal retval = st.getBigDecimal("rval");

			int num = retval == null ? 0 : retval.intValue();
			if (num != 0)
				map.put("error", mess);

			map.put("howmany", st.getBigDecimal("esaminati"));
			return map;

		} catch (Exception e) {
			e.printStackTrace();
			map.put("error", e.getMessage());
			return map;
		}

		finally {
			try {
				if (st != null)
					st.close();
			} catch (SQLException s) {
			    logger.severe(s);
			}


		}
	}

	public HashMap callTUwriteEsclusioni(String ulss, String tpscr, String data_dal, String data_al, String filename, String delimiter, String format) {
		CallableStatement st = null;
		HashMap map = new HashMap();
		try {
			String stmt = "BEGIN  tracciato_unico.WRITE_ESCLUSIONI_TU(?,?,?,?,?,?,?,?,?,?,?); END;";
			/*tracciato_unico.WRITE_ESCLUSIONI_TU
   (this_tpscr in char, this_ulss in char,ulss_regionale in char,
   dal in varchar, al in varchar, FILENAME VARCHAR,
   delimiter in char,export_format in char,
   message IN OUT varchar2, esaminati IN OUT number,rval IN OUT number)*/
			DBTransaction tr = this.getDBTransaction();
			st = tr.createCallableStatement(stmt, 1);

			if (ulss == null)
				throw new Exception("Nessuna azienda sanitaria indicata");
			st.setString("this_tpscr", tpscr);
			st.setString("this_ulss", ulss);
			st.setString("ulss_regionale", AccessManager.CODREGIONALE);
			st.setString("dal", data_dal);
			st.setString("al", data_al);
			st.setString("FILENAME", filename);
			st.setString("delimiter", delimiter);
			st.setString("export_format", format);


			st.registerOutParameter("message", java.sql.Types.VARCHAR);
			st.registerOutParameter("esaminati", java.sql.Types.NUMERIC);
			st.registerOutParameter("rval", java.sql.Types.NUMERIC);
			st.executeUpdate();


			// se si vuole mandare un messaggio
			String mess = st.getString("message");
			BigDecimal retval = st.getBigDecimal("rval");

			int num = retval == null ? 0 : retval.intValue();
			if (num != 0)
				map.put("error", mess);

			map.put("howmany", st.getBigDecimal("esaminati"));
			return map;

		} catch (Exception e) {
			e.printStackTrace();
			map.put("error", e.getMessage());
			return map;
		}

		finally {
			try {
				if (st != null)
					st.close();
			} catch (SQLException s) {
			    logger.severe(s);
			}


		}
	}

	/**
	 * Chiama il package PL/SQL TRACCIATO_DWH
	 * @return
	 * @param periodo
	 * @param anno
	 * @param tpscr
	 * @param ulss
	 */
	public HashMap callDWHwrite(String ulss, String tpscr, String anno, String periodo, String test) {
		CallableStatement st = null;
		HashMap map = new HashMap();
		try {
			String stmt = "BEGIN TRACCIATO_DWH.ESPORTA_TRACCIATO(?,?,?,?,?,?,?); END;";

			DBTransaction tr = this.getDBTransaction();
			st = tr.createCallableStatement(stmt, 1);

			st.setString("p_ulss", ulss);
			st.setString("p_tpscr", tpscr);
			st.setString("p_anno", anno);
			st.setString("p_periodo", periodo);
			st.setString("p_test", test);

			st.registerOutParameter("message", java.sql.Types.VARCHAR);
			st.registerOutParameter("esaminati", java.sql.Types.NUMERIC);
			st.executeUpdate();


			// se si vuole mandare un messaggio
			map.put("error", st.getString("message"));
			map.put("howmany", st.getBigDecimal("esaminati"));
			return map;

		} catch (Exception e) {
			e.printStackTrace();
			map.put("error", e.getMessage());
			return map;
		}

		finally {
			try {
				if (st != null)
					st.close();
			} catch (SQLException s) {
			    logger.severe(s);
			}


		}
	}

	/**
	 *
	 * @return
	 * @param prestazioni
	 * @param centro_ref
	 * @param centro_prel
	 * @param al
	 * @param dal
	 * @param tpscr
	 * @param ulss
	 */
	public HashMap callSPSwrite (String ulss, String tpscr, String dal, String al, 
	            BigDecimal centro_prel, String centro_ref, String prestazioni, String tipi_invito, String labor_hpv)
	  {
	    CallableStatement st = null;
	    HashMap map=new HashMap();
	    try 
	    {
	      String stmt = "BEGIN EXPORT_FLUSSO_SPS.ESPORTA_FLUSSO(?,?,?,?,?,?,?,?,?,?); END;";

	      DBTransaction tr = this.getDBTransaction();
	      st = tr.createCallableStatement(stmt,1);

	      st.setString("p_ulss",ulss);
	      st.setString("p_tpscr",tpscr);
	      st.setString("dal",dal);
	      st.setString("al",al);
	      st.setString("prestazioni",prestazioni);
	      st.setString("p_id_centro_ref",centro_ref);
	      st.setBigDecimal("p_id_centro_prel",centro_prel);
	      st.setString("p_id_lab_hpv",labor_hpv);
	      st.setString("p_tipi_invito", tipi_invito);
	          
	      st.registerOutParameter("message", java.sql.Types.VARCHAR);      
	      st.executeUpdate();   

	      // se si vuole mandare un messaggio
	      map.put("error",st.getString("message"));
	      return map;
	        
	      } catch(Exception e) {
	          e.printStackTrace();
	          map.put("error",e.getMessage());
	          return map;
	        }
	    
	    finally 
	    {
	      try 
	      {
	        if (st != null) st.close();
	      }
	      catch (SQLException s) { }          
	    }
	  }

	/**
	 * Da implementare, chiama la procedura PL/SQL per l'import dei referti da
	 * database di frontiera
	 * @return
	 * @param al
	 * @param dal
	 * @param centro
	 * @param tpscr
	 * @param ulss
	 */
	public String callImportRefertiFromDB(String ulss, String tpscr, BigDecimal centro, String dal, String al)

	{
		/*  CallableStatement st = null;

    try
    {

      String stmt = "BEGIN  CARICA_REFERTI.inserimento_referti(?,?,?,?,?); END;";

      DBTransaction tr = this.getDBTransaction();
      st = tr.createCallableStatement(stmt,1);

      if(ulss==null)
        throw new Exception("Nessuna azienda sanitaria indicata");
      st.setBigDecimal(1,centro);		
      st.setString(2,ulss);
      st.setString(3,tpscr);
      st.registerOutParameter(4, java.sql.Types.VARCHAR);
      st.registerOutParameter(5, java.sql.Types.NUMERIC);
      st.executeUpdate();


// se si vuole mandare un messaggio
      String mess=st.getString(4);
      int num = (st.getBigDecimal(5)).intValue();
      if(num != 0)
        return mess;
      else
        return null;

      } catch(Exception e) {
          e.printStackTrace();
          return e.getMessage();
        }

    finally
    {
      try
      {
        if (st != null) st.close();
      }
      catch (SQLException s) { }

    }*/
		return null;
	}

	 /**
     * Chiama la procedura PL/SQL per l'export di appuntamneti/accettazioni verso il
     * database di frontiera
     * @param ulss
     * @param tpscr
     * @param centro
     * @param dal
     * @param al
     * @param centro_prel
     * @param livello
     * @param exptype
     * @param tpdip
     * @param hpv
     * @param id_invito
     * @param user
     *
     * @return il primo elemento è l'eventuale messaggio d'errore,
     * il secondo è il BigDecimal con il numero di inviti da esportare
     */
    public HashMap callExport(String ulss, String tpscr, BigDecimal centro, String dal, String al,
                              BigDecimal centro_prel, BigDecimal livello, BigDecimal exptype, String tpdip,
                              BigDecimal hpv, BigDecimal id_invito, String user) {
        CallableStatement st = null;
        HashMap out = new HashMap();

        try {
            /*exptype: 0=appuntamenti, 1=accettazioni, 2=cancellazioni*/

            //19122013 Gaion: modifiche per l'export colon 2 liv
            String stmt = "";
            if (livello.intValue() == 1) {
                stmt =
                    (String) ViewHelper.decodeByTpscr(tpscr,
                                                      "BEGIN  export_appn.crea_export_appn(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); END;",
                                                      "BEGIN  EXPORT_COLON.crea_export(?,?,?,?,?,?,?,?,?,?,?,?,?); END;",
                                                      "BEGIN  export_appn.crea_export_appn(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); END;",
                                                      "BEGIN  export_appn.crea_export_appn(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); END;",
                                                      "BEGIN  export_appn.crea_export_appn(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); END;");
            } else {
                stmt = "BEGIN  export_appn.crea_export_appn(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); END;";
            }

            DBTransaction tr = this.getDBTransaction();
            st = tr.createCallableStatement(stmt, 1);

            if (ulss == null)
                throw new Exception("Nessuna azienda sanitaria indicata");

            st.setString("p_data_da", dal);
            st.setString("p_data_a", al);
            st.setBigDecimal("p_id_centro_ref", centro);
            st.setBigDecimal("p_id_centro_prel", centro_prel);
            st.setBigDecimal("p_tipo", exptype);
            st.setBigDecimal("p_livello", livello);
            st.setString("p_ulss", ulss);
            st.setString("p_tpscr", tpscr);
            st.setBigDecimal("p_id_invito", id_invito);

            //la procedura per cito e mammo ha parametri in più
            if (!("CO".equals(tpscr) && livello.intValue() == 1)) {
                /* String dip=(String)ViewHelper.decodeByTpscr(tpscr,"AP",null,"RA");
	                                 st.setString("p_tpdip",dip);*/
                st.setString("p_tpdip", tpdip);
                //per il citologico passo anche l'info su hpv
                st.setBigDecimal("p_test", hpv);
            }

            st.setString("p_operatore", user);

            st.registerOutParameter("message", java.sql.Types.VARCHAR);
            st.registerOutParameter("rval", java.sql.Types.NUMERIC);
            st.registerOutParameter("nrighe", java.sql.Types.NUMERIC);
            st.executeUpdate();

            // se si vuole mandare un messaggio

            int num = (st.getBigDecimal("rval")).intValue();
            //se rval=-1 c'è un errore
            if (num < 0) {
                out.put("error", st.getString("message"));
            } else {
                out.put("result", st.getBigDecimal("nrighe"));
            }
        } catch (Exception e) {
            e.printStackTrace();
            out.put("error", e.getMessage());
        } finally {
            try {
                if (st != null)
                    st.close();
            } catch (SQLException s) {
            }
        }
        return out;
    }

	/**
	 *
	 *  Container's getter for Impexp_SoLogTransferTUView1
	 */
	public Impexp_SoLogTransferViewImpl getImpexp_SoLogTransferTUView1() {
		return (Impexp_SoLogTransferViewImpl)findViewObject("Impexp_SoLogTransferTUView1");
	}


	public synchronized void log(String azienda, String tipoDip, String verso, String msg, String tpscr) {
		Row newRow = this.getImpexp_SoLogTransferTUView1().createRow();

		// creare un sequence per l'id del log

		SequenceImpl s = new SequenceImpl("so_log_transfer_seq", this);

		Long next = (Long)s.getData();


		newRow.setAttribute("Idlog", next);
		newRow.setAttribute("Gruppo", tipoDip);
		newRow.setAttribute("Verso", verso);
		try {
			newRow.setAttribute("Data", DateUtils.getTimestampNow());
		} catch (Exception e) {
			e.printStackTrace();
		}

		int l = this.getImpexp_SoLogTransferTUView1().findAttributeDef("Descrizione").getPrecision();
		l = Math.min(msg.length(), l);
		newRow.setAttribute("Descrizione", msg.substring(0, l));
		newRow.setAttribute("Ulss", azienda);
		newRow.setAttribute("Tpscr", tpscr);


		this.getImpexp_SoLogTransferTUView1().insertRow(newRow);

		getTransaction().commit();
	}

	public synchronized void logDWH(String azienda, String tipoDip, String verso, String msg, String tpscr) {
		Row newRow = this.getImpexp_SoLogTransferDWHView1().createRow();

		// creare un sequence per l'id del log

		SequenceImpl s = new SequenceImpl("so_log_transfer_seq", this);

		Long next = (Long)s.getData();


		newRow.setAttribute("Idlog", next);
		newRow.setAttribute("Gruppo", tipoDip);
		newRow.setAttribute("Verso", verso);
		try {
			newRow.setAttribute("Data", DateUtils.getTimestampNow());
		} catch (Exception e) {
			e.printStackTrace();
		}

		int l = this.getImpexp_SoLogTransferDWHView1().findAttributeDef("Descrizione").getPrecision();
		l = Math.min(msg.length(), l);
		newRow.setAttribute("Descrizione", msg.substring(0, l));
		newRow.setAttribute("Ulss", azienda);
		newRow.setAttribute("Tpscr", tpscr);


		this.getImpexp_SoLogTransferDWHView1().insertRow(newRow);

		getTransaction().commit();
	}

	public synchronized void logSPS(String azienda, String tipoDip, String verso, String msg, String tpscr) {
		Row newRow = this.getImpexp_SoLogTransferSPSView1().createRow();

		// creare un sequence per l'id del log

		SequenceImpl s = new SequenceImpl("so_log_transfer_seq", this);

		Long next = (Long)s.getData();


		newRow.setAttribute("Idlog", next);
		newRow.setAttribute("Gruppo", tipoDip);
		newRow.setAttribute("Verso", verso);
		try {
			newRow.setAttribute("Data", DateUtils.getTimestampNow());
		} catch (Exception e) {
			e.printStackTrace();
		}

		int l = this.getImpexp_SoLogTransferSPSView1().findAttributeDef("Descrizione").getPrecision();
		l = Math.min(msg.length(), l);
		newRow.setAttribute("Descrizione", msg.substring(0, l));
		newRow.setAttribute("Ulss", azienda);
		newRow.setAttribute("Tpscr", tpscr);


		this.getImpexp_SoLogTransferSPSView1().insertRow(newRow);

		getTransaction().commit();
	}

	/**
	 *
	 *  Container's getter for Impexp_SoImportRefertiView1
	 */
	public Impexp_SoImportRefertiViewImpl getImpexp_SoImportRefertiView1() {
		return (Impexp_SoImportRefertiViewImpl)findViewObject("Impexp_SoImportRefertiView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SoImpexpRefertiView1
	 */
	public Impexp_SoImpexpRefertiViewImpl getImpexp_SoImpexpRefertiView1() {
		return (Impexp_SoImpexpRefertiViewImpl)findViewObject("Impexp_SoImpexpRefertiView1");
	}

	/**
	 *
	 *  Container's getter for Ref_AppModule1
	 */
	public ApplicationModuleImpl getRef_AppModule1() {
		return (ApplicationModuleImpl)findApplicationModule("Ref_AppModule1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SoLogImpexpView1
	 */
	public Impexp_SoLogImpexpViewImpl getImpexp_SoLogImpexpView1() {
		return (Impexp_SoLogImpexpViewImpl)findViewObject("Impexp_SoLogImpexpView1");
	}


	public void logMsg(String codts, String group, String coderrore, String impexp, String ulss, String tpscr) {
		ViewObject vo = this.getImpexp_SoLogImpexpView1();
		Impexp_SoLogImpexpViewRow r = (Impexp_SoLogImpexpViewRow)vo.createRow();
		vo.insertRow(r);
		r.setCoderrore(coderrore);
		r.setCodts(codts);
		r.setGruppo(group);
		r.setImpexp(impexp);
		r.setTpscr(tpscr);
		r.setUlss(ulss);
		this.getTransaction().commit();
	}

	/**
	 *
	 *  Container's getter for Impexp_SoStPoptarget1
	 */
	public Impexp_SoStPoptargetImpl getImpexp_SoStPoptarget1() {
		return (Impexp_SoStPoptargetImpl)findViewObject("Impexp_SoStPoptarget1");
	}

	/**
	 *
	 *  Container's getter for RefCo_AppModule1
	 */
	public ApplicationModuleImpl getRefCo_AppModule1() {
		return (ApplicationModuleImpl)findApplicationModule("RefCo_AppModule1");
	}

	/**
	 *
	 *  Container's getter for RefMa_AppModule1
	 */
	public ApplicationModuleImpl getRefMa_AppModule1() {
		return (ApplicationModuleImpl)findApplicationModule("RefMa_AppModule1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SoCnfImpexpView2
	 */
	public Impexp_SoCnfImpexpViewImpl getImpexp_SoCnfImpexpView2() {
		return (Impexp_SoCnfImpexpViewImpl)findViewObject("Impexp_SoCnfImpexpView2");
	}

	/**
	 *
	 *  Container's getter for Impexp_SoCentroPrelView1
	 */
	public Impexp_SoCentroPrelViewImpl getImpexp_SoCentroPrelView1() {
		return (Impexp_SoCentroPrelViewImpl)findViewObject("Impexp_SoCentroPrelView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SoLogTransferView1
	 */
	public Impexp_SoLogTransferViewImpl getImpexp_SoLogTransferView1() {
		return (Impexp_SoLogTransferViewImpl)findViewObject("Impexp_SoLogTransferView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_TUSoggettoView1
	 */
	public Impexp_TUSoggettoViewImpl getImpexp_TUSoggettoView1() {
		return (Impexp_TUSoggettoViewImpl)findViewObject("Impexp_TUSoggettoView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_TUEsclusioniView1
	 */
	public Impexp_TUEsclusioniViewImpl getImpexp_TUEsclusioniView1() {
		return (Impexp_TUEsclusioniViewImpl)findViewObject("Impexp_TUEsclusioniView1");
	}


	/**
	 *
	 *  Container's getter for Cnf_SoCnfTpinvitoRegionaleView1
	 */
	public Cnf_SoCnfTpinvitoRegionaleViewImpl getCnf_SoCnfTpinvitoRegionaleView1() {
		return (Cnf_SoCnfTpinvitoRegionaleViewImpl)findViewObject("Cnf_SoCnfTpinvitoRegionaleView1");
	}

	/**
	 *
	 *  Container's getter for Cnf_SoCnfSugg1livRegionaleView1
	 */
	public Cnf_SoCnfSugg1livRegionaleViewImpl getCnf_SoCnfSugg1livRegionaleView1() {
		return (Cnf_SoCnfSugg1livRegionaleViewImpl)findViewObject("Cnf_SoCnfSugg1livRegionaleView1");
	}

	/**
	 *
	 *  Container's getter for Cnf_SoCnfSugg2livRegionaleView1
	 */
	public Cnf_SoCnfSugg2livRegionaleViewImpl getCnf_SoCnfSugg2livRegionaleView1() {
		return (Cnf_SoCnfSugg2livRegionaleViewImpl)findViewObject("Cnf_SoCnfSugg2livRegionaleView1");
	}

	/**
	 *
	 *  Container's getter for Cnf_SoCnfSugg3livRegionaleView1
	 */
	public Cnf_SoCnfSugg3livRegionaleViewImpl getCnf_SoCnfSugg3livRegionaleView1() {
		return (Cnf_SoCnfSugg3livRegionaleViewImpl)findViewObject("Cnf_SoCnfSugg3livRegionaleView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_TUReferti1livCIView1
	 */
	public Impexp_TUReferti1livCIViewImpl getImpexp_TUReferti1livCIView1() {
		return (Impexp_TUReferti1livCIViewImpl)findViewObject("Impexp_TUReferti1livCIView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_TUReferti2livCIView1
	 */
	public Impexp_TUReferti2livCIViewImpl getImpexp_TUReferti2livCIView1() {
		return (Impexp_TUReferti2livCIViewImpl)findViewObject("Impexp_TUReferti2livCIView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_TUInterventiCIView1
	 */
	public Impexp_TUInterventiCIViewImpl getImpexp_TUInterventiCIView1() {
		return (Impexp_TUInterventiCIViewImpl)findViewObject("Impexp_TUInterventiCIView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_TUInvitiColonView1
	 */
	public Impexp_TUInvitiColonViewImpl getImpexp_TUInvitiColonView1() {
		return (Impexp_TUInvitiColonViewImpl)findViewObject("Impexp_TUInvitiColonView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_TUReferti1livCOView1
	 */
	public Impexp_TUReferti1livCOViewImpl getImpexp_TUReferti1livCOView1() {
		return (Impexp_TUReferti1livCOViewImpl)findViewObject("Impexp_TUReferti1livCOView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_TUReferti2livCOView1
	 */
	public Impexp_TUReferti2livCOViewImpl getImpexp_TUReferti2livCOView1() {
		return (Impexp_TUReferti2livCOViewImpl)findViewObject("Impexp_TUReferti2livCOView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_TUEndoscopieView1
	 */
	public Impexp_TUEndoscopieViewImpl getImpexp_TUEndoscopieView1() {
		return (Impexp_TUEndoscopieViewImpl)findViewObject("Impexp_TUEndoscopieView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_TUInterventiCOView1
	 */
	public Impexp_TUInterventiCOViewImpl getImpexp_TUInterventiCOView1() {
		return (Impexp_TUInterventiCOViewImpl)findViewObject("Impexp_TUInterventiCOView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_TUInvitiMammoView1
	 */
	public Impexp_TUInvitiMammoViewImpl getImpexp_TUInvitiMammoView1() {
		return (Impexp_TUInvitiMammoViewImpl)findViewObject("Impexp_TUInvitiMammoView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_TUReferti1livMAView1
	 */
	public Impexp_TUReferti1livMAViewImpl getImpexp_TUReferti1livMAView1() {
		return (Impexp_TUReferti1livMAViewImpl)findViewObject("Impexp_TUReferti1livMAView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_TUReferti2livMAView1
	 */
	public Impexp_TUReferti2livMAViewImpl getImpexp_TUReferti2livMAView1() {
		return (Impexp_TUReferti2livMAViewImpl)findViewObject("Impexp_TUReferti2livMAView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_TUInterventiMAView1
	 */
	public Impexp_TUInterventiMAViewImpl getImpexp_TUInterventiMAView1() {
		return (Impexp_TUInterventiMAViewImpl)findViewObject("Impexp_TUInterventiMAView1");
	}

	/**
	 *
	 *  Container's getter for Cnf_SoCnfTpscrView1
	 */
	public Cnf_SoCnfTpscrViewImpl getCnf_SoCnfTpscrView1() {
		return (Cnf_SoCnfTpscrViewImpl)findViewObject("Cnf_SoCnfTpscrView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_TUInvitiCitoView1
	 */
	public Impexp_TUInvitiCitoViewImpl getImpexp_TUInvitiCitoView1() {
		return (Impexp_TUInvitiCitoViewImpl)findViewObject("Impexp_TUInvitiCitoView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SoImportRefertiCOView1
	 */
	public Impexp_SoImportRefertiCOViewImpl getImpexp_SoImportRefertiCOView1() {
		return (Impexp_SoImportRefertiCOViewImpl)findViewObject("Impexp_SoImportRefertiCOView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SoStPoptargetAnagView1
	 */
	public Impexp_SoStPoptargetAnagViewImpl getImpexp_SoStPoptargetAnagView1() {
		return (Impexp_SoStPoptargetAnagViewImpl)findViewObject("Impexp_SoStPoptargetAnagView1");
	}

	/**
	 *
	 *  Container's getter for FkPoptarget_PoptargetAnagLink1
	 */
	public ViewLinkImpl getFkPoptarget_PoptargetAnagLink1() {
		return (ViewLinkImpl)findViewLink("FkPoptarget_PoptargetAnagLink1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SoCnfImpexpTpdipView1
	 */
	public Impexp_SoCnfImpexpTpdipViewImpl getImpexp_SoCnfImpexpTpdipView1() {
		return (Impexp_SoCnfImpexpTpdipViewImpl)findViewObject("Impexp_SoCnfImpexpTpdipView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SoImportRefertiHPVView1
	 */
	public Impexp_SoImportRefertiHPVViewImpl getImpexp_SoImportRefertiHPVView1() {
		return (Impexp_SoImportRefertiHPVViewImpl)findViewObject("Impexp_SoImportRefertiHPVView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SoImportRefertiMAView1
	 */
	public Impexp_SoImportRefertiMAViewImpl getImpexp_SoImportRefertiMAView1() {
		return (Impexp_SoImportRefertiMAViewImpl)findViewObject("Impexp_SoImportRefertiMAView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_Sdosps_ElencoFlussiView1
	 */
	public Impexp_Sdosps_ElencoFlussiViewImpl getImpexp_Sdosps_ElencoFlussiView1() {
		return (Impexp_Sdosps_ElencoFlussiViewImpl)findViewObject("Impexp_Sdosps_ElencoFlussiView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SdospsDaextView1
	 */
	public Impexp_SdospsDaextViewImpl getImpexp_SdospsDaextView1() {
		return (Impexp_SdospsDaextViewImpl)findViewObject("Impexp_SdospsDaextView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SdospsUlssErogView1
	 */
	public Impexp_SdospsUlssErogViewImpl getImpexp_SdospsUlssErogView1() {
		return (Impexp_SdospsUlssErogViewImpl)findViewObject("Impexp_SdospsUlssErogView1");
	}


    /**
     *
     *  Container's getter for Impexp_SoCnfImpexpAnagView
     */
	public Impexp_SoCnfImpexpViewImpl getImpexp_SoCnfImpexpAnagView() {
		return (Impexp_SoCnfImpexpViewImpl)findViewObject("Impexp_SoCnfImpexpAnagView");
	}

	/**
	 *
	 *  Container's getter for Impexp_CodaProcessiView1
	 */
	public Impexp_CodaProcessiViewImpl getImpexp_CodaProcessiView1() {
		return (Impexp_CodaProcessiViewImpl)findViewObject("Impexp_CodaProcessiView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SoCodaProcessiView1
	 */
	public Impexp_SoCodaProcessiViewImpl getImpexp_SoCodaProcessiView1() {
		return (Impexp_SoCodaProcessiViewImpl)findViewObject("Impexp_SoCodaProcessiView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SoImportPresenzeView1
	 */
	public ViewObjectImpl getImpexp_SoImportPresenzeView1() {
		return (ViewObjectImpl)findViewObject("Impexp_SoImportPresenzeView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SoImportRefertiR2View1
	 */
	public ViewObjectImpl getImpexp_SoImportRefertiR2View1() {
		return (ViewObjectImpl)findViewObject("Impexp_SoImportRefertiR2View1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SoImportRefertiA2View1
	 */
	public ViewObjectImpl getImpexp_SoImportRefertiA2View1() {
		return (ViewObjectImpl)findViewObject("Impexp_SoImportRefertiA2View1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SoLogTransferDWHView1
	 */
	public Impexp_SoLogTransferViewImpl getImpexp_SoLogTransferDWHView1() {
		return (Impexp_SoLogTransferViewImpl)findViewObject("Impexp_SoLogTransferDWHView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SoLogTransferSPSView1
	 */
	public Impexp_SoLogTransferViewImpl getImpexp_SoLogTransferSPSView1() {
		return (Impexp_SoLogTransferViewImpl)findViewObject("Impexp_SoLogTransferSPSView1");
	}

	/**
	 *
	 *  Container's getter for Impexp_SoCnfSpsPrestazioniView1
	 */
	public Impexp_SoCnfSpsPrestazioniViewImpl getImpexp_SoCnfSpsPrestazioniView1() {
		return (Impexp_SoCnfSpsPrestazioniViewImpl)findViewObject("Impexp_SoCnfSpsPrestazioniView1");
	}

	/**
	 * Container's getter for Impexp_SoCnfImpexpView4.
	 * @return Impexp_SoCnfImpexpView4
	 */
	public Impexp_SoCnfImpexpViewImpl getImpexp_SoCnfImpAccettazioneView() {
		return (Impexp_SoCnfImpexpViewImpl)findViewObject("Impexp_SoCnfImpAccettazioneView");
	}


    /**
     * Container's getter for Ref_SoRefertomammo1livView1.
     * @return Ref_SoRefertomammo1livView1
     */
	public Ref_SoRefertomammo1livViewImpl getRef_SoRefertomammo1livView1() {
		return (Ref_SoRefertomammo1livViewImpl)findViewObject("Ref_SoRefertomammo1livView1");
	}


    /**
     * Container's getter for StatoMsgLOV1.
     * @return StatoMsgLOV1
     */
	public ViewObjectImpl getStatoMsgLOV1() {
		return (ViewObjectImpl)findViewObject("StatoMsgLOV1");
	}


    /**
     * Container's getter for Ref_SoRefertocito1livView1.
     * @return Ref_SoRefertocito1livView1
     */
    public Ref_SoRefertocito1livViewImpl getRef_SoRefertocito1livView1() {
        return (Ref_SoRefertocito1livViewImpl)findViewObject("Ref_SoRefertocito1livView1");
    }

    /**
     * Container's getter for Ref_SoRefertomammo2livView1.
     * @return Ref_SoRefertomammo2livView1
     */
    public Ref_SoRefertomammo2livViewImpl getRef_SoRefertomammo2livView1() {
        return (Ref_SoRefertomammo2livViewImpl)findViewObject("Ref_SoRefertomammo2livView1");
    }


    /**
     * Container's getter for Impexp_SoCnfFlussiHL7View1.
     * @return Impexp_SoCnfFlussiHL7View1
     */
    public ViewObjectImpl getImpexp_SoCnfFlussiHL7View1() {
        return (ViewObjectImpl)findViewObject("Impexp_SoCnfFlussiHL7View1");
    }

    /**
     * Container's getter for Ref_SoRefertocolon1livView1.
     * @return Ref_SoRefertocolon1livView1
     */
    public Ref_SoRefertocolon1livViewImpl getRef_SoRefertocolon1livView1() {
        return (Ref_SoRefertocolon1livViewImpl)findViewObject("Ref_SoRefertocolon1livView1");
    }


    /**
     * Container's getter for Ref_SoRefertopfasView1.
     * @return Ref_SoRefertopfasView1
     */
    public ViewObjectImpl getRef_SoRefertopfasView1() {
        return (ViewObjectImpl)findViewObject("Ref_SoRefertopfasView1");
    }

    /**
     * Container's getter for RefPf_AppModule1.
     * @return RefPf_AppModule1
     */
    public ApplicationModuleImpl getRefPf_AppModule1() {
        return (ApplicationModuleImpl)findApplicationModule("RefPf_AppModule1");
    }

    /**
     * Container's getter for ImpExp_DatiQuestPFView1.
     * @return ImpExp_DatiQuestPFView1
     */
    public ViewObjectImpl getImpExp_DatiQuestPFView1() {
        return (ViewObjectImpl)findViewObject("ImpExp_DatiQuestPFView1");
    }

    /**
     * Container's getter for ImpExp_EsamiPfasView1.
     * @return ImpExp_EsamiPfasView1
     */
    public ViewObjectImpl getImpExp_EsamiPfasView1() {
        return (ViewObjectImpl)findViewObject("ImpExp_EsamiPfasView1");
    }


    /**
     * Container's getter for Impexp_SoCnfTpdipartimentaleView1.
     * @return Impexp_SoCnfTpdipartimentaleView1
     */
    public Impexp_SoCnfTpdipartimentaleViewImpl getImpexp_SoCnfTpdipartimentaleView1() {
        return (Impexp_SoCnfTpdipartimentaleViewImpl) findViewObject("Impexp_SoCnfTpdipartimentaleView1");
    }

    /**
     * Container's getter for Impexp_ElabEsclusioniView1.
     * @return Impexp_ElabEsclusioniView1
     */
    public ViewObjectImpl getImpexp_ElabEsclusioniView1() {
        return (ViewObjectImpl) findViewObject("Impexp_ElabEsclusioniView1");
    }

    /**
     * Container's getter for Ref_SoRefertocolon2livView1.
     * @return Ref_SoRefertocolon2livView1
     */
    public Ref_SoRefertocolon2livViewImpl getRef_SoRefertocolon2livView1() {
        return (Ref_SoRefertocolon2livViewImpl) findViewObject("Ref_SoRefertocolon2livView1");
    }

    /**
     * Container's getter for Ref_SoRefertocito2livView1.
     * @return Ref_SoRefertocito2livView1
     */
    public Ref_SoRefertocito2livViewImpl getRef_SoRefertocito2livView1() {
        return (Ref_SoRefertocito2livViewImpl) findViewObject("Ref_SoRefertocito2livView1");
    }

    /**
     * Container's getter for Impexp_SoCnfImpExpLogView1.
     * @return Impexp_SoCnfImpExpLogView1
     */
    public Impexp_SoCnfImpExpLogViewImpl getImpexp_SoCnfImpExpLogView1() {
        return (Impexp_SoCnfImpExpLogViewImpl) findViewObject("Impexp_SoCnfImpExpLogView1");
    }
}
